<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Mechanism.AvaloniaUI.Themes.Fluent;assembly=Mechanism.AvaloniaUI.Themes.Fluent"
        xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
        xmlns:mecore="clr-namespace:Mechanism.AvaloniaUI.Core;assembly=Mechanism.AvaloniaUI"
        xmlns:mectrl="clr-namespace:Mechanism.AvaloniaUI.Controls;assembly=Mechanism.AvaloniaUI">
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=Button]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <!--i:Interaction.Behaviors>
            <local:PressedRotationAngleBehavior/>
          </i:Interaction.Behaviors-->
          <ContentControl>
            <Panel x:Name="ElementPanel">
              <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"/>
              <DockPanel x:Name="ContentIconPanel">
                <TemplatedControl Name="IconControl" DockPanel.Dock="Left"/>
                <Rectangle Name="IconGapRect" DockPanel.Dock="Left"/>
                <ContentPresenter Name="PART_ContentPresenter"/>
              </DockPanel>
            </Panel>
          </ContentControl>
          <local:ButtonPressRotator IsHitTestVisible="False" TargetElement="{Binding ElementName=ElementPanel}"/>
        <!--IsVisuallyPressed="{TemplateBinding IsVisuallyPressed}"-->
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=Button][IsVisuallyPressed=True] /template/ local|ButtonPressRotator">
    <Style.Animations>
        <Animation Duration="0:0:0.125" FillMode="Both" Easing="QuadraticEaseOut">
            <KeyFrame Cue="100%">
                <Setter Property="InsetMultiplier" Value="20"/>
            </KeyFrame>
        </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=Button][IsVisuallyPressed=False] /template/ local|ButtonPressRotator">
    <Style.Animations>
        <Animation Duration="0:0:0.125" FillMode="Both" Easing="QuadraticEaseOut">
            <KeyFrame Cue="100%">
                <Setter Property="InsetMultiplier" Value="0"/>
            </KeyFrame>
        </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=Button][IsVisuallyPointerOver=True][IsVisuallyPressed=False] /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundBaseLowBrush}"/>
    <Setter Property="Opacity" Value="0.5"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=Button][IsVisuallyPressed=True] /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundBaseMediumLowBrush}"/>
  </Style>
  
  
  
    
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=TextBox]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <DockPanel x:Name="ContentIconPanel" HorizontalAlignment="Stretch">
            <TemplatedControl Name="IconControl" DockPanel.Dock="Left"/>
            <Rectangle Name="IconGapRect" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_ContentPresenter" TextBlock.TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}, FallbackValue=Left}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left"/>
          </DockPanel>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=TextBox][IsVisuallyPointerOver=True][IsVisuallyChecked=False] /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundAltMediumBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource SystemControlHighlightBaseMediumHighBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=TextBox][IsVisuallyChecked=True] /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundAltHighBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource SystemControlHighlightAccentBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=TextBox][IsVisuallyEnabled=False] /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundBaseLowBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource SystemControlDisabledBaseLowBrush}"/>
  </Style>
  
  
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ TemplatedControl#IconControl">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ ContentPresenter#PART_ContentPresenter">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}"/>
  </Style>
</Styles>
