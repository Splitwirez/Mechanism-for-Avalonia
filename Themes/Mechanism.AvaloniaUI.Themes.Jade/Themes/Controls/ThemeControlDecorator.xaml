<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mecore="clr-namespace:Mechanism.AvaloniaUI.Core;assembly=Mechanism.AvaloniaUI"
        xmlns:mectrl="clr-namespace:Mechanism.AvaloniaUI.Controls;assembly=Mechanism.AvaloniaUI">
  <Design.PreviewWith>
    <Panel d:DesignWidth="100" d:DesignHeight="50">
      <Panel.Resources>
        <ResourceDictionary>
          <ResourceDictionary.MergedDictionaries>
            <ResourceInclude Source="avares://Mechanism.AvaloniaUI.Themes.Jade/Themes/Colors/BaseLight.xaml"/>
          </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
      </Panel.Resources>
      <Button>Yes</Button>
      <!--BorderBrush="#FFC5C5C5" Background="#FFE1E1E1"-->
    </Panel>
  </Design.PreviewWith>
  <Style Selector="mectrl|ThemeControlDecorator">
    <Setter Property="Content" Value="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
    <Setter Property="mecore:AttachedIcon.Icon" Value="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
    <Setter Property="IsVisuallyPointerOver" Value="{Binding IsPointerOver, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
    <Setter Property="IsVisuallyPressed" Value="{Binding IsPressed, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
    <Setter Property="IsVisuallyEnabled" Value="{Binding IsEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
    <Setter Property="IsVisuallyChecked" Value="{Binding IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Transparent}"/>
    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Transparent}"/>
    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Transparent}"/>
    <Setter Property="Padding" Value="{Binding Padding, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=5}" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Center}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Center}"/>
    <Setter Property="mecore:CornerCurves.CornerCurves" Value="{Binding Path=(mecore:CornerCurves.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
    <Setter Property="mecore:BorderPresence.BorderPresence" Value="{Binding Path=(mecore:BorderPresence.BorderPresence), RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
    <Setter Property="Focusable" Value="False"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=Button]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border x:Name="IdleBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <Border x:Name="HoverBackground" Background="{DynamicResource ButtonHoverBackground}" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" BorderThickness="{Binding BorderThickness, ElementName=IdleBackground}" IsVisible="{Binding IsVisuallyPointerOver, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
          <Border x:Name="PressedBackground" Background="{DynamicResource ButtonPressedBackground}" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" BorderThickness="{Binding BorderThickness, ElementName=IdleBackground}" IsVisible="{Binding IsVisuallyPressed, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
          <DockPanel Margin="{Binding BorderThickness, ElementName=IdleBackground}">
            <Panel Height="14" DockPanel.Dock="Bottom">
              <Rectangle x:Name="SizerRectangle" Margin="0,2,0,0" Grid.Row="2"/>
              <DockPanel Margin="0,2,0,0" Grid.Row="2">
                <Border DockPanel.Dock="Left" Width="{Binding Bounds.Height, ElementName=SizerRectangle}">
                  <Border.Background>
                    <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource ButtonBottomShineGradientStops}"/>
                  </Border.Background>
                  <Border.OpacityMask>
                    <RadialGradientBrush Center="75%,125%" GradientOrigin="75%,125%" Radius="1.25">
                      <GradientStop Offset="1" Color="White"/>
                      <GradientStop Offset="1" Color="Transparent"/>
                    </RadialGradientBrush>
                  </Border.OpacityMask>
                  <Border.CornerRadius>
                    <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="0,0,0,1;0">
                      <Binding.Converter>
                        <mecore:CornerCurvesToCornerRadiiConverter/>
                      </Binding.Converter>
                    </Binding>
                  </Border.CornerRadius>
                </Border>
                <Border DockPanel.Dock="Right" Width="{Binding Bounds.Height, ElementName=SizerRectangle}">
                  <Border.Background>
                    <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource ButtonBottomShineGradientStops}"/>
                  </Border.Background>
                  <Border.OpacityMask>
                    <RadialGradientBrush Center="25%,125%" GradientOrigin="25%,125%" Radius="1.25">
                      <GradientStop Offset="1" Color="White"/>
                      <GradientStop Offset="1" Color="Transparent"/>
                    </RadialGradientBrush>
                  </Border.OpacityMask>
                  <Border.CornerRadius>
                    <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="0,0,1,0;0">
                      <Binding.Converter>
                        <mecore:CornerCurvesToCornerRadiiConverter/>
                      </Binding.Converter>
                    </Binding>
                  </Border.CornerRadius>
                </Border>
                <Rectangle>
                  <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource ButtonBottomShineGradientStops}"/>
                  </Rectangle.Fill>
                </Rectangle>
              </DockPanel>
            </Panel>
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="0">
              <Border.Background>
                <LinearGradientBrush StartPoint="0%,0%" EndPoint="100%,0%" GradientStops="{DynamicResource ButtonTopShineGradientStops}"/>
              </Border.Background>
              <Border.OpacityMask>
                <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%">
                  <GradientStop Offset="0" Color="White"/>
                  <GradientStop Offset="1" Color="#C0FFFFFF"/>
                </LinearGradientBrush>
              </Border.OpacityMask>
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1,1,0,0;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
            </Border>
          </DockPanel>
          <Border x:Name="DisabledBackground" Background="{DynamicResource ButtonDisabledBackground}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" BorderThickness="{Binding BorderThickness, ElementName=IdleBackground}" IsVisible="{Binding !IsVisuallyEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
          <DockPanel Grid.RowSpan="3" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
            <ContentPresenter x:Name="PART_AttachedIconPresenter" Content="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue={x:Null}}" DockPanel.Dock="Left"/>
            <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}"/>
          </DockPanel>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=PaneFrame]">
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
          <Border.BorderThickness>
            <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
              <Binding.Converter>
                <mecore:BorderPresenceToThicknessesConverter/>
              </Binding.Converter>
            </Binding>
          </Border.BorderThickness>
          <ContentPresenter Content="{TemplateBinding Content}"/>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <!--Style Selector="mectrl|ThemeControlDecorator:not(:pointerover) /template/ :is(Control)#HoverBackground">
    <Setter Property="IsVisible" Value="False"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(:pressed) /template/ :is(Control)#PressedBackground">
    <Setter Property="IsVisible" Value="False"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsEnabled=True] /template/ :is(Control)#DisabledBackground">
    <Setter Property="IsVisible" Value="False"/>
  </Style-->
</Styles>
