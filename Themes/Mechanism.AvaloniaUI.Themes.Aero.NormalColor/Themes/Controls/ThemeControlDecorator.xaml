<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mecore="clr-namespace:Mechanism.AvaloniaUI.Core;assembly=Mechanism.AvaloniaUI"
        xmlns:meconv="clr-namespace:Mechanism.AvaloniaUI.Converters;assembly=Mechanism.AvaloniaUI"
        xmlns:mectrl="clr-namespace:Mechanism.AvaloniaUI.Controls;assembly=Mechanism.AvaloniaUI">
  <Style Selector="mectrl|ThemeControlDecorator">
    <Setter Property="Focusable" Value="False"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=Button]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Classes="AeroStyledIdleBackground" BorderBrush="{TemplateBinding BorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border x:Name="AeroStyledIdleInnerBackground" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource AeroButtonIdleInnerBorderBrush}" BorderThickness="1">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
            </Border>
          </Border>
          <Border Classes="AeroStyledHoverBackground" BorderBrush="{DynamicResource AeroButtonHoverOuterBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border Background="{DynamicResource AeroButtonHoverBackground}" BorderBrush="{DynamicResource AeroButtonHoverInnerBorderBrush}" BorderThickness="1">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
            </Border>
          </Border>
          <Border Classes="AeroStyledPressedBackground" BorderBrush="{DynamicResource AeroButtonPressedOuterBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border Background="{DynamicResource AeroButtonPressedBackground}" BorderBrush="{DynamicResource AeroButtonPressedInnerBorderBrush}" BorderThickness="1,1,1,0">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
            </Border>
          </Border>
          <Border Classes="AeroStyledDisabledBackground" BorderBrush="{DynamicResource AeroButtonDisabledOuterBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border Background="{DynamicResource AeroButtonDisabledBackground}" BorderBrush="{DynamicResource AeroButtonDisabledInnerBorderBrush}">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
              <Border.BorderThickness>
                <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                  <Binding.Converter>
                    <mecore:BorderPresenceToThicknessesConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.BorderThickness>
            </Border>
          </Border>
          <DockPanel x:Name="ContentIconPanel">
            <ContentPresenter Name="IconPresenter" DockPanel.Dock="Left"/>
            <Rectangle Name="IconGapRect" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_ContentPresenter"/>
          </DockPanel>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=ToolTip]">
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
          <Border.CornerRadius>
            <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
              <Binding.Converter>
                <mecore:CornerCurvesToCornerRadiiConverter/>
              </Binding.Converter>
            </Binding>
          </Border.CornerRadius>
          <Border.BorderThickness>
            <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
              <Binding.Converter>
                <mecore:BorderPresenceToThicknessesConverter/>
              </Binding.Converter>
            </Binding>
          </Border.BorderThickness>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=TextBox]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Classes="AeroStyledIdleBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <Border Classes="AeroStyledHoverBackground" Background="{DynamicResource AeroTextBoxHoverBackground}" BorderBrush="{DynamicResource AeroTextBoxHoverBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <Border Classes="AeroStyledFocusBackground" Background="{DynamicResource AeroTextBoxFocusBackground}" BorderBrush="{DynamicResource AeroTextBoxFocusBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <Border Classes="AeroStyledDisabledBackground" Background="{DynamicResource AeroTextBoxDisabledBackground}" BorderBrush="{DynamicResource AeroTextBoxDisabledBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <!--StackPanel x:Name="ContentIconPanel" Orientation="Horizontal">
            <ContentPresenter Name="IconPresenter"/>
            <ContentPresenter Name="PART_ContentPresenter"/>
          </StackPanel-->
          <DockPanel x:Name="ContentIconPanel" HorizontalAlignment="Stretch">
            <ContentPresenter Name="IconPresenter" DockPanel.Dock="Left"/>
            <Rectangle Name="IconGapRect" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_ContentPresenter" TextBlock.TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}, FallbackValue=Left}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left"/>
          </DockPanel>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=PaneFrame]">
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
          <Border.BorderThickness>
            <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
              <Binding.Converter>
                <mecore:BorderPresenceToThicknessesConverter/>
              </Binding.Converter>
            </Binding>
          </Border.BorderThickness>
          <ContentPresenter x:Name="PART_ContentPresenter"/>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  
    
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ ContentPresenter">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource AeroDisabledForeground}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Border.AeroStyledDisabledBackground">
    <Setter Property="IsVisible" Value="{Binding !IsVisuallyEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Border.AeroStyledHoverBackground">
    <Setter Property="Opacity" Value="0"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Border.AeroStyledPressedBackground">
    <Setter Property="Opacity" Value="0"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Border.AeroStyledCheckedBackground">
    <Setter Property="Opacity" Value="0"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Path#CheckMark">
    <Setter Property="Opacity" Value="0"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxIdleCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=True] /template/ Path#CheckMark">
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxHoverCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Path#CheckMark">
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxPressedCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ Path#CheckMark">
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxDisabledCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable:indeterminate /template/ :is(Shape)#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable[IsVisuallyChecked=False] /template/ :is(Shape)#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable[IsVisuallyChecked=True]:not(:indeterminate) /template/ :is(Shape)#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>

  <Style Selector="mectrl|ThemeControlDecorator /template/ Ellipse#CheckMark">
    <Setter Property="Opacity" Value="0"/>
    <Setter Property="Fill" Value="{DynamicResource AeroRadioButtonIdleCircleFill}"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxIdleCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=True] /template/ Ellipse#CheckMark">
    <Setter Property="Fill" Value="{DynamicResource AeroRadioButtonHoverCircleFill}"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxHoverCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Ellipse#CheckMark">
    <Setter Property="Fill" Value="{DynamicResource AeroRadioButtonPressedCircleFill}"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxPressedCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ Ellipse#CheckMark">
    <Setter Property="Fill" Value="{DynamicResource AeroRadioButtonDisabledCircleFill}"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxDisabledCheckMarkBrush}"/>
  </Style>
  <!--Style Selector="mectrl|ThemeControlDecorator[IsVisuallyChecked=False] /template/ Ellipse#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyChecked=True] /template/ Ellipse#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style-->
  
  <Style Selector="mectrl|ThemeControlDecorator /template/ Rectangle#IndeterminateMark">
    <Setter Property="Fill" Value="{DynamicResource AeroCheckBoxIdleCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=True] /template/ Rectangle#IndeterminateMark">
    <Setter Property="Fill" Value="{DynamicResource AeroCheckBoxHoverCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Rectangle#IndeterminateMark">
    <Setter Property="Fill" Value="{DynamicResource AeroCheckBoxPressedCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ Rectangle#IndeterminateMark">
    <Setter Property="Fill" Value="{DynamicResource AeroCheckBoxDisabledCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(:indeterminate) /template/ Rectangle#IndeterminateMark">
    <Setter Property="Opacity" Value="0"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=False] /template/ Border.AeroStyledHoverBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=True] /template/ Border.AeroStyledHoverBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.125-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Border.AeroStyledHoverBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.125-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=False][IsVisuallyPointerOver=True] /template/ Border.AeroStyledHoverBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=False]:not(.ButtonCheckable) /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=False][IsVisuallyChecked=False].ButtonCheckable /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.125-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyChecked=False].ButtonCheckable /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyChecked=True].ButtonCheckable /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.125-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <!--Style Selector="mectrl|ThemeControlDecorator.Checkable:indeterminate /template/ Rectangle#IndeterminateMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable[IsVisuallyChecked=True]:not(:indeterminate) /template/ Rectangle#IndeterminateMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable[IsVisuallyChecked=False]:not(:indeterminate) /template/ Rectangle#IndeterminateMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style-->

  <!--Style Selector=":not(:checked) /template/ Border.AeroStyledCheckedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.375">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector=":checked /template/ Border.AeroStyledCheckedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>

  <Style Selector=":not(:focus) /template/ Border.AeroStyledFocusBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.375">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector=":focus /template/ Border.AeroStyledFocusBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style-->
</Styles>
