<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mecore="clr-namespace:Mechanism.AvaloniaUI.Core;assembly=Mechanism.AvaloniaUI"
        xmlns:meconv="clr-namespace:Mechanism.AvaloniaUI.Converters;assembly=Mechanism.AvaloniaUI"
        xmlns:mectrl="clr-namespace:Mechanism.AvaloniaUI.Controls;assembly=Mechanism.AvaloniaUI">
  <Design.PreviewWith>
    <StackPanel Orientation="Vertical" Width="100">
      <StackPanel.Styles>
        <StyleInclude Source="avares://Mechanism.AvaloniaUI.Themes.Aero.NormalColor/Themes/Aero.NormalColor.xaml"/>
      </StackPanel.Styles>
      <Button Content="Button">
        <mecore:AttachedIcon.Icon>
          <Rectangle Width="16" Height="16" Fill="Red"/>
        </mecore:AttachedIcon.Icon>
      </Button>
      <CheckBox Content="CheckBox" IsThreeState="True" IsChecked="{x:Null}">
        <mecore:AttachedIcon.Icon>
          <Rectangle Width="16" Height="16" Fill="Red"/>
        </mecore:AttachedIcon.Icon>
      </CheckBox>
      <RadioButton Content="RadioButton">
        <mecore:AttachedIcon.Icon>
          <Rectangle Width="16" Height="16" Fill="Red"/>
        </mecore:AttachedIcon.Icon>
      </RadioButton>
    </StackPanel>
  </Design.PreviewWith>
  <Style Selector="mectrl|ThemeControlDecorator">
    <Setter Property="Focusable" Value="False"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=Button]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Classes="AeroStyledIdleBackground" BorderBrush="{TemplateBinding BorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border x:Name="AeroStyledIdleInnerBackground" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource AeroButtonIdleInnerBorderBrush}" BorderThickness="1">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
            </Border>
          </Border>
          <Border Classes="AeroStyledHoverBackground" BorderBrush="{DynamicResource AeroButtonHoverOuterBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border Background="{DynamicResource AeroButtonHoverBackground}" BorderBrush="{DynamicResource AeroButtonHoverInnerBorderBrush}" BorderThickness="1">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
            </Border>
          </Border>
          <Border Classes="AeroStyledPressedBackground" BorderBrush="{DynamicResource AeroButtonPressedOuterBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border Background="{DynamicResource AeroButtonPressedBackground}" BorderBrush="{DynamicResource AeroButtonPressedInnerBorderBrush}" BorderThickness="1,1,1,0">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
            </Border>
          </Border>
          <Border Classes="AeroStyledDisabledBackground" BorderBrush="{DynamicResource AeroButtonDisabledOuterBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border Background="{DynamicResource AeroButtonDisabledBackground}" BorderBrush="{DynamicResource AeroButtonDisabledInnerBorderBrush}">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
              <Border.BorderThickness>
                <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                  <Binding.Converter>
                    <mecore:BorderPresenceToThicknessesConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.BorderThickness>
            </Border>
          </Border>
          <DockPanel x:Name="ContentIconPanel">
            <ContentPresenter Name="IconPresenter" DockPanel.Dock="Left"/>
            <Rectangle Name="IconGapRect" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_ContentPresenter"/>
          </DockPanel>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=CheckBox]">
    <Setter Property="Template">
      <ControlTemplate>
        <Grid ColumnDefinitions="Auto,*">
          <Panel VerticalAlignment="Stretch" Width="{Binding Bounds.Height, RelativeSource={RelativeSource Mode=Self}}">
            <Border Classes="AeroStyledIdleBackground" BorderBrush="{TemplateBinding BorderBrush}">
              <Border.BorderThickness>
                <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                  <Binding.Converter>
                    <mecore:BorderPresenceToThicknessesConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.BorderThickness>
              <Border BorderBrush="{DynamicResource AeroCheckBoxIdleMiddleBorderBrush}" BorderThickness="1">
                <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource AeroCheckBoxIdleInnerBorderBrush}" BorderThickness="1"/>
              </Border>
            </Border>
            <Border Classes="AeroStyledHoverBackground" BorderBrush="{DynamicResource AeroCheckBoxHoverOuterBorderBrush}">
              <Border.BorderThickness>
                <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                  <Binding.Converter>
                    <mecore:BorderPresenceToThicknessesConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.BorderThickness>
              <Border BorderBrush="{DynamicResource AeroCheckBoxHoverMiddleBorderBrush}" BorderThickness="1">
                <Border Background="{DynamicResource AeroCheckBoxHoverBackground}" BorderBrush="{DynamicResource AeroCheckBoxHoverInnerBorderBrush}" BorderThickness="1"/>
              </Border>
            </Border>
            <Border Classes="AeroStyledPressedBackground" BorderBrush="{DynamicResource AeroCheckBoxPressedOuterBorderBrush}">
              <Border.BorderThickness>
                <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                  <Binding.Converter>
                    <mecore:BorderPresenceToThicknessesConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.BorderThickness>
              <Border BorderBrush="{DynamicResource AeroCheckBoxPressedMiddleBorderBrush}" BorderThickness="1">
                <Border Background="{DynamicResource AeroCheckBoxPressedBackground}" BorderBrush="{DynamicResource AeroCheckBoxPressedInnerBorderBrush}" BorderThickness="1"/>
              </Border>
            </Border>
            <Border Classes="AeroStyledDisabledBackground" Background="{DynamicResource AeroCheckBoxDisabledBackground}" BorderBrush="{DynamicResource AeroCheckBoxDisabledBorderBrush}">
              <Border.BorderThickness>
                <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                  <Binding.Converter>
                    <mecore:BorderPresenceToThicknessesConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.BorderThickness>
            </Border>
            <Panel>
              <Path Name="CheckMark" Data="M 0 4 L 3 7 L 6 0" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
              <Rectangle Name="IndeterminateMark" Width="5" Height="5" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            </Panel>
          </Panel>
          <!--StackPanel x:Name="ContentIconPanel" Orientation="Horizontal" Grid.Column="1">
            <ContentPresenter Name="IconPresenter"/>
            <ContentPresenter Name="PART_ContentPresenter"/>
          </StackPanel-->
          <DockPanel x:Name="ContentIconPanel" Grid.Column="1">
            <ContentPresenter Name="IconPresenter" DockPanel.Dock="Left"/>
            <Rectangle Name="IconGapRect" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_ContentPresenter"/>
          </DockPanel>
        </Grid>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=RadioButton]">
    <Setter Property="Template">
      <ControlTemplate>
        <Grid ColumnDefinitions="Auto,*">
          <Panel VerticalAlignment="Stretch" Width="{Binding Bounds.Height, RelativeSource={RelativeSource Mode=Self}}">
            <Border Classes="AeroStyledIdleBackground">
              <Grid>
                <Ellipse Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                <Ellipse Stroke="{DynamicResource AeroCheckBoxIdleMiddleBorderBrush}" StrokeThickness="1" Margin="1"/>
                <Ellipse Fill="{TemplateBinding Background}" Stroke="{DynamicResource AeroCheckBoxIdleInnerBorderBrush}" StrokeThickness="1" Margin="2"/>
              </Grid>
            </Border>
            <Border Classes="AeroStyledHoverBackground">
              <Grid>
                <Ellipse Stroke="{DynamicResource AeroCheckBoxHoverOuterBorderBrush}" StrokeThickness="1"/>
                <Ellipse Stroke="{DynamicResource AeroCheckBoxHoverMiddleBorderBrush}" StrokeThickness="1" Margin="1"/>
                <Ellipse Fill="{DynamicResource AeroCheckBoxHoverBackground}" Stroke="{DynamicResource AeroCheckBoxHoverInnerBorderBrush}" StrokeThickness="1" Margin="2"/>
              </Grid>
            </Border>
            <Border Classes="AeroStyledPressedBackground">
              <Grid>
                <Ellipse Stroke="{DynamicResource AeroCheckBoxPressedOuterBorderBrush}" StrokeThickness="1"/>
                <Ellipse Stroke="{DynamicResource AeroCheckBoxPressedMiddleBorderBrush}" StrokeThickness="1" Margin="1"/>
                <Ellipse Fill="{DynamicResource AeroCheckBoxPressedBackground}" Stroke="{DynamicResource AeroCheckBoxPressedInnerBorderBrush}" StrokeThickness="1" Margin="2"/>
              </Grid>
            </Border>
            <Border Classes="AeroStyledDisabledBackground">
              <Ellipse Fill="{DynamicResource AeroCheckBoxDisabledBackground}" Stroke="{DynamicResource AeroCheckBoxDisabledBorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
            </Border>
            <Panel Width="5" Height="5" HorizontalAlignment="Center" VerticalAlignment="Center">
              <Ellipse Name="CheckMark" StrokeThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Uniform"/>
              <Rectangle Name="IndeterminateMark" StrokeThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            </Panel>
          </Panel>
          <DockPanel x:Name="ContentIconPanel" Grid.Column="1">
            <ContentPresenter Name="IconPresenter" DockPanel.Dock="Left"/>
            <Rectangle Name="IconGapRect" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_ContentPresenter"/>
          </DockPanel>
        </Grid>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=ToolTip]">
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
          <Border.CornerRadius>
            <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
              <Binding.Converter>
                <mecore:CornerCurvesToCornerRadiiConverter/>
              </Binding.Converter>
            </Binding>
          </Border.CornerRadius>
          <Border.BorderThickness>
            <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
              <Binding.Converter>
                <mecore:BorderPresenceToThicknessesConverter/>
              </Binding.Converter>
            </Binding>
          </Border.BorderThickness>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=TextBox]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Classes="AeroStyledIdleBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <Border Classes="AeroStyledHoverBackground" Background="{DynamicResource AeroTextBoxHoverBackground}" BorderBrush="{DynamicResource AeroTextBoxHoverBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <Border Classes="AeroStyledFocusBackground" Background="{DynamicResource AeroTextBoxFocusBackground}" BorderBrush="{DynamicResource AeroTextBoxFocusBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <Border Classes="AeroStyledDisabledBackground" Background="{DynamicResource AeroTextBoxDisabledBackground}" BorderBrush="{DynamicResource AeroTextBoxDisabledBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
          </Border>
          <!--StackPanel x:Name="ContentIconPanel" Orientation="Horizontal">
            <ContentPresenter Name="IconPresenter"/>
            <ContentPresenter Name="PART_ContentPresenter"/>
          </StackPanel-->
          <DockPanel x:Name="ContentIconPanel" HorizontalAlignment="Stretch">
            <ContentPresenter Name="IconPresenter" DockPanel.Dock="Left"/>
            <Rectangle Name="IconGapRect" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_ContentPresenter" TextBlock.TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}, FallbackValue=Left}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left"/>
          </DockPanel>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=PaneFrame]">
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
          <Border.BorderThickness>
            <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
              <Binding.Converter>
                <mecore:BorderPresenceToThicknessesConverter/>
              </Binding.Converter>
            </Binding>
          </Border.BorderThickness>
          <ContentPresenter x:Name="PART_ContentPresenter"/>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=ToolBarTray]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Background="{TemplateBinding Background}" BorderThickness="0">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border BorderBrush="{TemplateBinding BorderBrush}">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
              <Border.BorderThickness>
                <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1,1,0,0;0">
                  <Binding.Converter>
                    <mecore:BorderPresenceToThicknessesConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.BorderThickness>
            </Border>
          </Border>
          <Border Height="9" VerticalAlignment="Top">
            <Border.Background>
              <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource AeroToolBarTrayTopShineGradientStops}"/>
            </Border.Background>
          </Border>
          <Border Height="14" VerticalAlignment="Bottom">
            <Border.Background>
              <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource AeroToolBarTrayBottomGlowGradientStops}"/>
            </Border.Background>
          </Border>
          <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"/>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=ToolBar]">
    <Setter Property="Template">
      <ControlTemplate>
        <Border BorderBrush="{DynamicResource AeroToolBarOuterBorderBrush}" BorderThickness="0,0,1,1">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1,1,0">
            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"/>
          </Border>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=ToolBarButton]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Classes="AeroStyledHoverBackground" BorderBrush="{DynamicResource AeroToolBarButtonHoverOuterBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Panel>
              <Border>
                <Border.Background>
                  <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource AeroToolBarButtonHoverBackgroundGradientStops}"/>
                </Border.Background>
                <Border.CornerRadius>
                  <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                    <Binding.Converter>
                      <mecore:CornerCurvesToCornerRadiiConverter/>
                    </Binding.Converter>
                  </Binding>
                </Border.CornerRadius>
              </Border>
              <Border BorderBrush="{DynamicResource AeroToolBarButtonHoverInnerBorderBrush}" BorderThickness="1">
                <Border.CornerRadius>
                  <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                    <Binding.Converter>
                      <mecore:CornerCurvesToCornerRadiiConverter/>
                    </Binding.Converter>
                  </Binding>
                </Border.CornerRadius>
              </Border>
            </Panel>
          </Border>
          <Border Classes="AeroStyledPressedBackground" BorderBrush="{DynamicResource AeroToolBarButtonPressedBorderBrush}">
            <Border.Background>
              <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource AeroToolBarButtonPressedBackgroundGradientStops}"/>
            </Border.Background>
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Panel>
              <Border Width="5" HorizontalAlignment="Left">
                <Border.Background>
                  <LinearGradientBrush StartPoint="0%,0%" EndPoint="100%,0%" GradientStops="{DynamicResource AeroToolBarButtonPressedShadowGradientStops}"/>
                </Border.Background>
                <Border.CornerRadius>
                  <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2,0,0,2;0">
                    <Binding.Converter>
                      <mecore:CornerCurvesToCornerRadiiConverter/>
                    </Binding.Converter>
                  </Binding>
                </Border.CornerRadius>
              </Border>
              <Border Height="5" VerticalAlignment="Top">
                <Border.Background>
                  <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource AeroToolBarButtonPressedShadowGradientStops}"/>
                </Border.Background>
                <Border.CornerRadius>
                  <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2,2,0,0;0">
                    <Binding.Converter>
                      <mecore:CornerCurvesToCornerRadiiConverter/>
                    </Binding.Converter>
                  </Binding>
                </Border.CornerRadius>
              </Border>
            </Panel>
          </Border>
          <DockPanel x:Name="ContentIconPanel">
            <ContentPresenter Name="IconPresenter" DockPanel.Dock="Top"/>
            <Rectangle Name="IconGapRect" DockPanel.Dock="Top"/>
            <ContentPresenter Name="PART_ContentPresenter"/>
          </DockPanel>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=CommandBar]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel Margin="0,0,0,1">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Margin="0,0,0,-1">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="3;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border BorderBrush="{DynamicResource AeroCommandBarMiddleBorderBrush}">
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
              <Border.BorderThickness>
                <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="0,0,0,1;0">
                  <Binding.Converter>
                    <mecore:BorderPresenceToThicknessesConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.BorderThickness>
              <Border BorderThickness="1">
                <Border.BorderBrush>
                  <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource AeroCommandBarInnerBorderGradientStops}"/>
                </Border.BorderBrush>
                <Border.CornerRadius>
                  <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                    <Binding.Converter>
                      <mecore:CornerCurvesToCornerRadiiConverter/>
                    </Binding.Converter>
                  </Binding>
                </Border.CornerRadius>
              </Border>
            </Border>
          </Border>
          <!--ContentPresenter x:Name="PART_ContentPresenter"/-->
          <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"/>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[ControlStyle=CommandBarButton]">
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Classes="AeroStyledHoverBackground" BorderBrush="{DynamicResource AeroCommandBarButtonHoverOuterBorderBrush}">
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border BorderThickness="1" BorderBrush="{DynamicResource AeroCommandBarButtonHoverInnerBorderBrush}">
              <Border.Background>
                <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource AeroCommandBarButtonHoverBackgroundGradientStops}"/>
              </Border.Background>
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
            </Border>
          </Border>
          <Border Classes="AeroStyledPressedBackground" BorderBrush="{DynamicResource AeroCommandBarButtonPressedOuterBorderBrush}">
            <Border.Background>
              <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource AeroCommandBarButtonPressedBackgroundGradientStops}"/>
            </Border.Background>
            <Border.CornerRadius>
              <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="2;0">
                <Binding.Converter>
                  <mecore:CornerCurvesToCornerRadiiConverter/>
                </Binding.Converter>
              </Binding>
            </Border.CornerRadius>
            <Border.BorderThickness>
              <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
                <Binding.Converter>
                  <mecore:BorderPresenceToThicknessesConverter/>
                </Binding.Converter>
              </Binding>
            </Border.BorderThickness>
            <Border Height="5" VerticalAlignment="Top">
              <Border.Background>
                <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%" GradientStops="{DynamicResource AeroCommandBarButtonPressedShadowGradientStops}"/>
              </Border.Background>
              <Border.CornerRadius>
                <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1,1,0,0;0">
                  <Binding.Converter>
                    <mecore:CornerCurvesToCornerRadiiConverter/>
                  </Binding.Converter>
                </Binding>
              </Border.CornerRadius>
            </Border>
          </Border>
          <DockPanel x:Name="ContentIconPanel">
            <ContentPresenter Name="IconPresenter" DockPanel.Dock="Left"/>
            <Rectangle Name="IconGapRect" DockPanel.Dock="Left"/>
            <ContentPresenter Name="PART_ContentPresenter"/>
          </DockPanel>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  
    
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ ContentPresenter">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource AeroDisabledForeground}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Border.AeroStyledDisabledBackground">
    <Setter Property="IsVisible" Value="{Binding !IsVisuallyEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Border.AeroStyledHoverBackground">
    <Setter Property="Opacity" Value="0"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Border.AeroStyledPressedBackground">
    <Setter Property="Opacity" Value="0"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Border.AeroStyledCheckedBackground">
    <Setter Property="Opacity" Value="0"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ Path#CheckMark">
    <Setter Property="Opacity" Value="0"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxIdleCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=True] /template/ Path#CheckMark">
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxHoverCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Path#CheckMark">
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxPressedCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ Path#CheckMark">
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxDisabledCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable:indeterminate /template/ :is(Shape)#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable[IsVisuallyChecked=False] /template/ :is(Shape)#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable[IsVisuallyChecked=True]:not(:indeterminate) /template/ :is(Shape)#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>

  <Style Selector="mectrl|ThemeControlDecorator /template/ Ellipse#CheckMark">
    <Setter Property="Opacity" Value="0"/>
    <Setter Property="Fill" Value="{DynamicResource AeroRadioButtonIdleCircleFill}"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxIdleCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=True] /template/ Ellipse#CheckMark">
    <Setter Property="Fill" Value="{DynamicResource AeroRadioButtonHoverCircleFill}"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxHoverCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Ellipse#CheckMark">
    <Setter Property="Fill" Value="{DynamicResource AeroRadioButtonPressedCircleFill}"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxPressedCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ Ellipse#CheckMark">
    <Setter Property="Fill" Value="{DynamicResource AeroRadioButtonDisabledCircleFill}"/>
    <Setter Property="Stroke" Value="{DynamicResource AeroCheckBoxDisabledCheckMarkBrush}"/>
  </Style>
  <!--Style Selector="mectrl|ThemeControlDecorator[IsVisuallyChecked=False] /template/ Ellipse#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyChecked=True] /template/ Ellipse#CheckMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style-->
  
  <Style Selector="mectrl|ThemeControlDecorator /template/ Rectangle#IndeterminateMark">
    <Setter Property="Fill" Value="{DynamicResource AeroCheckBoxIdleCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=True] /template/ Rectangle#IndeterminateMark">
    <Setter Property="Fill" Value="{DynamicResource AeroCheckBoxHoverCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Rectangle#IndeterminateMark">
    <Setter Property="Fill" Value="{DynamicResource AeroCheckBoxPressedCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyEnabled=False] /template/ Rectangle#IndeterminateMark">
    <Setter Property="Fill" Value="{DynamicResource AeroCheckBoxDisabledCheckMarkBrush}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(:indeterminate) /template/ Rectangle#IndeterminateMark">
    <Setter Property="Opacity" Value="0"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=False] /template/ Border.AeroStyledHoverBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPointerOver=True] /template/ Border.AeroStyledHoverBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.125-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Border.AeroStyledHoverBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.125-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=False][IsVisuallyPointerOver=True] /template/ Border.AeroStyledHoverBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=False]:not(.ButtonCheckable) /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=False][IsVisuallyChecked=False].ButtonCheckable /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyPressed=True] /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.125-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyChecked=False].ButtonCheckable /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.375-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator[IsVisuallyChecked=True].ButtonCheckable /template/ Border.AeroStyledPressedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.001">
        <!--0:0:0.125-->
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <!--Style Selector="mectrl|ThemeControlDecorator.Checkable:indeterminate /template/ Rectangle#IndeterminateMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable[IsVisuallyChecked=True]:not(:indeterminate) /template/ Rectangle#IndeterminateMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.Checkable[IsVisuallyChecked=False]:not(:indeterminate) /template/ Rectangle#IndeterminateMark">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style-->

  <!--Style Selector=":not(:checked) /template/ Border.AeroStyledCheckedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.375">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector=":checked /template/ Border.AeroStyledCheckedBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>

  <Style Selector=":not(:focus) /template/ Border.AeroStyledFocusBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.375">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="0.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style>
  <Style Selector=":focus /template/ Border.AeroStyledFocusBackground">
    <Style.Animations>
      <Animation FillMode="Both" Duration="0:0:0.125">
        <KeyFrame Cue="100%">
          <Setter Property="Opacity" Value="1.0"/>
        </KeyFrame>
      </Animation>
    </Style.Animations>
  </Style-->
</Styles>
