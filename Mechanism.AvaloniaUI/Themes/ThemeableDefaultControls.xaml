<Styles xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:mectrl="clr-namespace:Mechanism.AvaloniaUI.Controls;assembly=Mechanism.AvaloniaUI"
             xmlns:mewin="clr-namespace:Mechanism.AvaloniaUI.Controls.Windows;assembly=Mechanism.AvaloniaUI"
             xmlns:metb="clr-namespace:Mechanism.AvaloniaUI.Controls.ToolBar;assembly=Mechanism.AvaloniaUI"
             xmlns:mecb="clr-namespace:Mechanism.AvaloniaUI.Controls.CommandBar;assembly=Mechanism.AvaloniaUI"
             xmlns:mecore="clr-namespace:Mechanism.AvaloniaUI.Core;assembly=Mechanism.AvaloniaUI"
             xmlns:meconv="clr-namespace:Mechanism.AvaloniaUI.Converters;assembly=Mechanism.AvaloniaUI">
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoBorderThickness)">
    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoCornerCurves)">
    <Setter Property="mecore:CornerCurves.CornerCurves" Value="{Binding Path=(mecore:CornerCurves.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoBorderPresence)">
    <Setter Property="mecore:BorderPresence.BorderPresence" Value="{Binding Path=(mecore:BorderPresence.BorderPresence), RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoState)">
    <Setter Property="IsVisuallyPointerOver" Value="{Binding IsPointerOver, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=False}"/>
    <Setter Property="IsVisuallyPressed" Value="{Binding IsPressed, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=False}"/>
    <Setter Property="IsVisuallyEnabled" Value="{Binding IsEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=False}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoBrushes)">
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Transparent}"/>
    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Transparent}"/>
    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Transparent}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoPadding)">
    <Setter Property="Padding" Value="{Binding Padding, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=5}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoContentTemplate) /template/ ContentPresenter#PART_ContentPresenter">
    <Setter Property="ContentTemplate" Value="{Binding ContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoContent)">
    <Setter Property="Content" Value="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=false}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoBrushes) /template/ ContentPresenter">
    <Setter Property="TextBlock.Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Transparent}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoContent) /template/ ContentPresenter#PART_ContentPresenter">
    <Setter Property="Content" Value="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    <Setter Property="IsVisible" Value="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static ObjectConverters.IsNotNull}}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoIcon)">
    <Setter Property="mecore:AttachedIcon.Icon" Value="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue={x:Null}}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoContent):not(.NoIcon)">
    <Setter Property="mecore:AttachedIcon.IconGap" Value="{Binding Path=(mecore:AttachedIcon.IconGap), RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=0.0}"/>
  </Style>
  <!--Style Selector="mectrl|ThemeControlDecorator:not(.NoIcon) /template/ ContentPresenter#IconPresenter"-->
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoIcon) /template/ TemplatedControl#IconControl">
    <Setter Property="Template" Value="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    <Setter Property="IsVisible" Value="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static ObjectConverters.IsNotNull}}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoIcon):not(.NoContent) /template/ Rectangle#IconGapRect">
    <Setter Property="Fill" Value="#01000000"/>
    <Setter Property="IsVisible">
      <MultiBinding ConverterParameter="All">
        <MultiBinding.Converter>
          <meconv:BoolsToBoolConverter/>
        </MultiBinding.Converter>
        <MultiBinding.Bindings>
          <Binding Path="Content" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
          <Binding Path="(mecore:AttachedIcon.Icon)" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
        </MultiBinding.Bindings>
      </MultiBinding>
      <!--Value="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static ObjectConverters.IsNotNull}}"/-->
    </Setter>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoIcon):not(.NoContent) /template/ Rectangle#IconGapRect:not(.Vertical)">
    <Setter Property="Width" Value="{Binding Path=(mecore:AttachedIcon.IconGap), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    <Setter Property="Height" Value="1"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoIcon):not(.NoContent) /template/ Rectangle#IconGapRect.Vertical">
    <Setter Property="Width" Value="{Binding Path=(mecore:AttachedIcon.IconGap), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    <Setter Property="Height" Value="1"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator /template/ :is(Panel)#ContentIconPanel">
    <Setter Property="Margin" Value="{Binding Padding, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <!--Style Selector="mectrl|ThemeControlDecorator.NoIcon /template/ ContentPresenter#PART_ContentPresenter">
    <Setter Property="Margin" Value="{Binding Padding, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style-->
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoAlignment)">
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Center}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue=Center}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoAlignment) /template/ ContentPresenter#PART_ContentPresenter">
    <Setter Property="HorizontalAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator:not(.NoAutoAlignment) /template/ :is(Panel)#ContentIconPanel">
    <Setter Property="HorizontalAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>

  <Style Selector="mectrl|ThemeControlDecorator.Checkable">
    <Setter Property="IsVisuallyChecked" Value="{Binding IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"/>
  </Style>
  <Style Selector="mectrl|ThemeControlDecorator.ButtonCheckable">
    <Setter Property="IsVisuallyChecked" Value="{Binding IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"/>
  </Style>
  
  
  
  <Style Selector="Button">
    <Setter Property="Template">
      <ControlTemplate>
        <mectrl:ThemeControlDecorator ControlStyle="Button"/>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="RepeatButton">
    <Setter Property="Template">
      <ControlTemplate>
        <mectrl:ThemeControlDecorator ControlStyle="Button"/>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="ToggleButton">
    <Setter Property="Template">
      <ControlTemplate>
        <mectrl:ThemeControlDecorator ControlStyle="Button" Classes="ButtonCheckable"/>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="CheckBox">
    <Setter Property="Template">
      <ControlTemplate>
        <mectrl:ThemeControlDecorator ControlStyle="CheckBox" Classes="Checkable"/>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="RadioButton">
    <Setter Property="Template">
      <ControlTemplate>
        <mectrl:ThemeControlDecorator ControlStyle="RadioButton" Classes="Checkable"/>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="TextBox">
    <Setter Property="Template">
      <ControlTemplate>
        <mectrl:ThemeControlDecorator ControlStyle="TextBox">
          <DockPanel Margin="{TemplateBinding Padding}">
            
            <TextBlock Name="floatingWatermark"
                       FontSize="{DynamicResource FontSizeSmall}"
                       Text="{TemplateBinding Watermark}"
                       DockPanel.Dock="Top">
              <TextBlock.IsVisible>
                <MultiBinding Converter="{x:Static BoolConverters.And}">
                  <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="UseFloatingWatermark"/>
                  <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="Text"
                           Converter="{x:Static StringConverters.IsNotNullOrEmpty}"/>
                </MultiBinding>
              </TextBlock.IsVisible>
            </TextBlock>

            <DataValidationErrors>
              <ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                            VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">

                <Panel>
                  <TextBlock Name="watermark"
                             Opacity="0.5"
                             Text="{TemplateBinding Watermark}"
                             IsVisible="{TemplateBinding Text, Converter={x:Static StringConverters.IsNullOrEmpty}}"/>
                  <TextPresenter Name="PART_TextPresenter"
                                 Text="{TemplateBinding Text, Mode=TwoWay}"
                                 CaretIndex="{TemplateBinding CaretIndex}"
                                 SelectionStart="{TemplateBinding SelectionStart}"
                                 SelectionEnd="{TemplateBinding SelectionEnd}"
                                 TextAlignment="{TemplateBinding TextAlignment}"
                                 TextWrapping="{TemplateBinding TextWrapping}"
                                 PasswordChar="{TemplateBinding PasswordChar}"
                                 SelectionBrush="{TemplateBinding SelectionBrush}"
                                 SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
                                 CaretBrush="{TemplateBinding CaretBrush}"/>
                </Panel>
              </ScrollViewer>
            </DataValidationErrors>
          </DockPanel>
        </mectrl:ThemeControlDecorator>
      </ControlTemplate>
    </Setter>
  </Style>
</Styles>