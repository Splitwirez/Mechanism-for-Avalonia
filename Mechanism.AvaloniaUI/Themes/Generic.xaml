<Styles xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:mectrl="clr-namespace:Mechanism.AvaloniaUI.Controls;assembly=Mechanism.AvaloniaUI"
             xmlns:meconv="clr-namespace:Mechanism.AvaloniaUI.Converters;assembly=Mechanism.AvaloniaUI"
             xmlns:mewin="clr-namespace:Mechanism.AvaloniaUI.Controls.Windows;assembly=Mechanism.AvaloniaUI"
             xmlns:metb="clr-namespace:Mechanism.AvaloniaUI.Controls.ToolBar;assembly=Mechanism.AvaloniaUI"
             xmlns:mecb="clr-namespace:Mechanism.AvaloniaUI.Controls.CommandBar;assembly=Mechanism.AvaloniaUI"
             xmlns:mecd="clr-namespace:Mechanism.AvaloniaUI.Controls.ContentDialog;assembly=Mechanism.AvaloniaUI"
             xmlns:mecore="clr-namespace:Mechanism.AvaloniaUI.Core;assembly=Mechanism.AvaloniaUI">
  <Styles.Resources>
    <ControlTemplate x:Key="EmbeddedFlyoutButtonTemplate">
      <Panel x:Name="PART_ButtonArea">
        <Border x:Name="BackgroundBorder" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource Mode=TemplatedParent}}">
          <Path Data="M 0 0 L 4 4 L 0 8 Z" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{Binding Padding, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
        </Border>
        <Popup x:Name="PART_Flyout" IsOpen="{Binding IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" StaysOpen="False" MinWidth="1" MinHeight="1" PlacementMode="Right" PlacementTarget="{Binding #BackgroundBorder}">
          <ContentPresenter Name="PART_FlyoutContentPresenter" Background="{DynamicResource ThemeBackgroundBrush}" BorderBrush="{DynamicResource ThemeBorderMidBrush}" BorderThickness="{DynamicResource ThemeBorderThickness}" ContentTemplate="{Binding FlyoutContentTemplate, RelativeSource={RelativeSource Mode=TemplatedParent}}" Content="{Binding FlyoutContent, RelativeSource={RelativeSource Mode=TemplatedParent}}" TextBlock.Foreground="{DynamicResource ThemeForegroundBrush}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"/>
        </Popup>
      </Panel>
    </ControlTemplate>
  </Styles.Resources>
  <Style Selector=":is(TopLevel)">
    <Setter Property="mecd:ContentDialog.MonitorActive" Value="True"/>
  </Style>
  <Style Selector="mewin|DecoratableWindow[HasSystemDecorations=True]">
    <Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}"/>
    <Setter Property="Foreground" Value="{DynamicResource ThemeForegroundBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <DockPanel>
            <Rectangle IsHitTestVisible="False" Height="{TemplateBinding ExtendedTitlebarHeight}" DockPanel.Dock="Top"/>
            <Border Background="{TemplateBinding Background}"/>
          </DockPanel>
          <VisualLayerManager>
            <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Background="Transparent"/>
          </VisualLayerManager>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mewin|DecoratableWindow[HasSystemDecorations=False]">
    <Setter Property="Padding" Value="1,31,1,1"/>
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
          <DockPanel>
            <Rectangle Height="{TemplateBinding ExtendedTitlebarHeight}" Margin="0,30,0,0"/>
            <VisualLayerManager Margin="{TemplateBinding Padding}">
              <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
            </VisualLayerManager>
          </DockPanel>
          <Panel x:Name="PART_Titlebar" Classes="ReduceOpacityOnInactive" Background="#01000000" VerticalAlignment="Top" Margin="6,0,0,0">
            <Rectangle Height="{TemplateBinding ExtendedTitlebarHeight}" Margin="0,30,0,0" IsHitTestVisible="False"/>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Top" Height="30">
              <Rectangle Width="16" Height="16" Margin="0,0,5,0" VerticalAlignment="Center" RenderOptions.BitmapInterpolationMode="HighQuality">
                <Rectangle.Fill>
                  <Binding Path="Icon" RelativeSource="{RelativeSource Mode=TemplatedParent}">
                    <Binding.Converter>
                      <meconv:WindowIconToImageBrushConverter/>
                    </Binding.Converter>
                  </Binding>
                </Rectangle.Fill>
              </Rectangle>
              <TextBlock Text="{TemplateBinding Title}" Foreground="{DynamicResource ThemeForegroundBrush}" FontWeight="Bold" VerticalAlignment="Center"/>
            </StackPanel>
          </Panel>
          <Grid Name="ResizeGrid" ColumnDefinitions="8,*,8" RowDefinitions="8,*,8">
            <Border x:Name="PART_TopLeftEdge" Grid.Row="0" Grid.Column="0"/>
            <Border x:Name="PART_TopCenterEdge" Grid.Row="0" Grid.Column="1"/>
            <Border x:Name="PART_TopRightEdge" Grid.Row="0" Grid.Column="2"/>
            <Border x:Name="PART_MiddleRightEdge" Grid.Row="1" Grid.Column="2"/>
            <Border x:Name="PART_BottomRightEdge" Grid.Row="2" Grid.Column="2"/>
            <Border x:Name="PART_BottomCenterEdge" Grid.Row="2" Grid.Column="1"/>
            <Border x:Name="PART_BottomLeftEdge" Grid.Row="2" Grid.Column="0"/>
            <Border x:Name="PART_MiddleLeftEdge" Grid.Row="1" Grid.Column="0"/>
          </Grid>
          <StackPanel Classes="ReduceOpacityOnInactive" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Height="30">
            <StackPanel.Styles>
              <Style Selector="Button">
                <Setter Property="Width" Value="45" />
                <Setter Property="Height" Value="30" />
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Focusable" Value="False"/>
              </Style>
              <Style Selector="Button:not(:pointerover):not(:pressed)">
                <Setter Property="Foreground" Value="{DynamicResource ThemeForegroundBrush}"/>
              </Style>
              <Style Selector="Button:pointerover /template/ ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource ThemeControlMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
              </Style>
              <Style Selector="Button:pressed  /template/ ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
              </Style>
              <Style Selector="Button > Path">
                <Setter Property="Stroke" Value="{DynamicResource ThemeForegroundBrush}"/>
                <Setter Property="StrokeThickness" Value="2"/>
              </Style>
              <Style Selector="Button:not(:pointerover):not(:pressed):disabled">
                <Setter Property="Opacity" Value="{DynamicResource ThemeDisabledOpacity}" />
              </Style>
              <Style Selector="mewin|DecoratableWindow /template/ Button#PART_MinimizeButton > Rectangle">
                <Setter Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}"/>
              </Style>
              <Style Selector="mewin|DecoratableWindow /template/ Button#PART_MaximizeButton Rectangle">
                <Setter Property="Stroke" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}"/>
                <Setter Property="StrokeThickness" Value="2"/>
              </Style>
              <Style Selector="mewin|DecoratableWindow /template/ Button#PART_MaximizeButton > Grid > Grid Border">
                <Setter Property="BorderBrush" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}"/>
              </Style>
              <Style Selector="mewin|DecoratableWindow[WindowState=Maximized] /template/ Button#PART_MaximizeButton > Grid > Rectangle">
                <Setter Property="IsVisible" Value="False"/>
              </Style>
              <Style Selector="mewin|DecoratableWindow[WindowState=Normal] /template/ Button#PART_MaximizeButton > Grid > Grid">
                <Setter Property="IsVisible" Value="False"/>
              </Style>
              <Style Selector="mewin|DecoratableWindow[WindowState=Minimized] /template/ Button#PART_MaximizeButton > Grid > Grid">
                <Setter Property="IsVisible" Value="False"/>
              </Style>
              <Style Selector="mewin|DecoratableWindow /template/ Button#PART_MaximizeButton > Grid > Grid > Rectangle">
                <Setter Property="Stroke" Value="Transparent"/>
                <Setter Property="StrokeThickness" Value="0"/>
                <Setter Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}"/>
              </Style>
            </StackPanel.Styles>
            <Button Name="PART_MinimizeButton">
              <Rectangle Width="10" Height="2"/>
            </Button>
            <Button Name="PART_MaximizeButton">
              <Grid>
                <Rectangle Width="10" Height="10"/>
                <Grid Width="10" Height="10">
                  <Border BorderThickness="2" Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                  <Grid Width="7" Height="7" HorizontalAlignment="Right" VerticalAlignment="Top">
                    <Border BorderThickness="0,2,2,0"/>
                    <Rectangle HorizontalAlignment="Left" VerticalAlignment="Top" Width="2" Height="3"/>
                    <Rectangle HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="3" Height="2"/>
                  </Grid>
                </Grid>
              </Grid>
            </Button>
            <Button Name="PART_CloseButton">
              <Path Data="M 0 0 L 10 10 M 10 0 L 0 10"/>
            </Button>
          </StackPanel>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mewin|DecoratableWindow[IsActive=False] /template/ :is(Panel).ReduceOpacityOnInactive">
    <Setter Property="Opacity" Value="0.5"/>
  </Style>
  <Style Selector="mewin|DecoratableWindow[CanResize=False] /template/ Grid#ResizeGrid">
    <Setter Property="IsVisible" Value="False"/>
  </Style>
  <Style Selector="mewin|DecoratableWindow[WindowState=Maximized] /template/ Panel#RootPanel">
    <Setter Property="Margin" Value="-1"/>
  </Style>
  <Style Selector="mewin|DecoratableWindow[WindowState=Maximized] /template/ Grid#ResizeGrid">
    <Setter Property="IsVisible" Value="False"/>
  </Style>
  <Style Selector="mewin|DecoratableWindow /template/ Grid#ResizeGrid Border">
    <Setter Property="Background" Value="#01000000"/>
  </Style>
  
  <!--Style Selector="mewin|DecoratableWindow[HasSystemDecorations=True]">
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}">
          <VisualLayerManager>
            <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
          </VisualLayerManager>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style-->
  <Style Selector="mectrl|OverflowFlyoutItemsControl">
    <Setter Property="BaseWidth" Value="9"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
          <Panel Name="RootPanel">
            <DockPanel>
              <Panel Width="15" DockPanel.Dock="Right">
                <ToggleButton x:Name="PART_FlyoutToggleButton" BorderThickness="0" HorizontalAlignment="Stretch" IsVisible="{TemplateBinding HasFlyoutItems}" IsChecked="{Binding $parent[mectrl:OverflowFlyoutItemsControl].IsFlyoutOpen, Mode=TwoWay}">
                  <StackPanel Orientation="Horizontal" Spacing="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <StackPanel.RenderTransform>
                      <TranslateTransform X="-1"/>
                    </StackPanel.RenderTransform>
                    <Path Data="M0,0 L0,3 1.5,4.5 0,6 0,9 4.5,4.5 z" Fill="{Binding $parent[ToggleButton].Foreground}" StrokeThickness="0"/>
                    <Path Data="M0,0 L0,3 1.5,4.5 0,6 0,9 4.5,4.5 z" Fill="{Binding $parent[ToggleButton].Foreground}" StrokeThickness="0"/>
                    <!--Path Data="M 0 0 L 3 3 L 0 6 L 2 6 L 5 3 L 2 0 Z" Fill="{Binding $parent[ToggleButton].Foreground}" StrokeThickness="0"/-->
                    <!--Path Data="M 0 0 L 3 3 L 0 6" Stroke="{Binding $parent[ToggleButton].Foreground}" StrokeThickness="2"/-->
                  </StackPanel>
                </ToggleButton>
              </Panel>
              <ItemsControl x:Name="PART_VisibleItemsPresenter" Items="{TemplateBinding VisibleItems}" ItemsPanel="{TemplateBinding ItemsPanel}" Margin="{TemplateBinding Padding}"/>
              <!--ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <mectrl:NoSizeStackPanel Orientation="Horizontal" ClipToBounds="True"/>
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
              </ItemsControl-->
            </DockPanel>
            <Popup x:Name="PART_Flyout" PlacementMode="Bottom" PlacementTarget="{Binding ElementName=PART_FlyoutToggleButton}" IsOpen="{Binding $parent[mectrl:OverflowFlyoutItemsControl].IsFlyoutOpen, Mode=TwoWay}" MinHeight="{TemplateBinding MinHeight}" StaysOpen="False">
              <!--IsOpen="{Binding Path=IsChecked, ElementName=PART_FlyoutToggleButton, Mode=TwoWay}"-->
              <Border Background="{DynamicResource ThemeBackgroundBrush}" BorderBrush="{DynamicResource ThemeBorderMidBrush}" BorderThickness="{DynamicResource ThemeBorderThickness}">
                <ItemsControl x:Name="PART_FlyoutItemsPresenter" Items="{TemplateBinding FlyoutItems}" ItemsPanel="{TemplateBinding FlyoutItemsPanel}"/>
              </Border>
            </Popup>
          </Panel>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|OverflowFlyoutItemsControl /template/ ToggleButton#PART_FlyoutToggleButton:not(:pointerover):not(:pressed)">
    <Setter Property="Background" Value="Transparent"/>
  </Style>

  <Style Selector="metb|ToolBar">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}" />
    <Setter Property="BorderThickness" Value="0,0,1,1"/>
    <Setter Property="MinWidth" Value="75"/>
    <Setter Property="BaseWidth" Value="16"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
          <DockPanel>
            <Thumb x:Name="PART_GripThumb" VerticalAlignment="Stretch" IsVisible="{Binding !$parent[metb:ToolBarTray].IsLocked}" Cursor="SizeAll" DockPanel.Dock="Left"/>
            <Panel>
              <mectrl:OverflowFlyoutItemsControl x:Name="PART_OverflowItemsControl" IsVisible="{TemplateBinding UseOverflow}" ItemsPanel="{TemplateBinding ItemsPanel}" IsFlyoutOpen="{Binding $parent[metb:ToolBar].IsFlyoutOpen, Mode=TwoWay}" ForceDesiredSize="True"/>
              <ItemsPresenter x:Name="RegularItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" IsVisible="{Binding !UseOverflow, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"/>
            </Panel>
          </DockPanel>
        </Border>
      </ControlTemplate>
    </Setter>
    <Setter Property="ItemsPanel">
      <ItemsPanelTemplate>
        <StackPanel Orientation="Horizontal"/>
      </ItemsPanelTemplate>
    </Setter>
  </Style>
  <Style Selector="metb|ToolBar[UseOverflow=True] /template/ mectrl|OverflowFlyoutItemsControl#PART_OverflowItemsControl">
    <Setter Property="Items" Value="{Binding Items, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="metb|ToolBar[UseOverflow=False] /template/ ItemsPresenter#RegularItemsPresenter">
    <Setter Property="Items" Value="{Binding Items, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="metb|ToolBar /template/ Thumb#PART_GripThumb">
    <Setter Property="Background" Value="#01000000"/>
    <Setter Property="Width" Value="9"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="#01000000" Padding="3">
          <Border>
            <Border.Background>
              <LinearGradientBrush StartPoint="0,0" EndPoint="0,7" SpreadMethod="Repeat">
                <GradientStop Offset="0.42857142857142857142857142857143" Color="{DynamicResource ThemeBorderLowColor}"/>
                <GradientStop Offset="0.42857142857142857142857142857143" Color="#01000000"/>
              </LinearGradientBrush>
            </Border.Background>
          </Border>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <!--Style Selector="metb|ToolBar[UseOverflow=False] > Menu">
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
          <mectrl:OverflowFlyoutItemsControl Items="{TemplateBinding Items}" ItemTemplate="{TemplateBinding ItemTemplate}" KeyboardNavigation.TabNavigation="Continue"/>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style-->
  <Style Selector="metb|ToolBar > :is(Button)">
    <Setter Property="Padding" Value="12,8"/>
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
          <StackPanel Orientation="Vertical" Spacing="2">
            <ContentPresenter x:Name="PART_IconPresenter" Content="{Binding (mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}" TextBlock.Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" TextBlock.Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </StackPanel>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="metb|ToolBar > :is(Button) /template/ Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="metb|ToolBar > :is(Button):not(:pointerover):not(:pressed) /template/ Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="Transparent"/>
  </Style>
  <Style Selector="metb|ToolBar > :is(Button):pointerover /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlMidBrush}"/>
  </Style>
  <Style Selector="metb|ToolBar > :is(Button):pressed /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>
  <Style Selector="metb|ToolBar > ToggleButton:checked /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>

  <Style Selector="metb|ToolBarTray">
    <Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}" />
    <Setter Property="BorderThickness" Value="1,1,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ItemsPresenter Name="PART_ItemsPresenter" Items="{TemplateBinding Items}" HorizontalAlignment="Stretch">
              <ItemsPresenter.ItemsPanel>
                <ItemsPanelTemplate>
                  <metb:ToolBarTrayPanel HorizontalAlignment="Stretch"/>
                </ItemsPanelTemplate>
              </ItemsPresenter.ItemsPanel>
            </ItemsPresenter>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--Style Selector="metb|ToolBarTrayItem">
    <Setter Property="Template">
      <ControlTemplate>
        <DockPanel>
          <Thumb x:Name="PART_GripThumb" Width="20" MinHeight="20" VerticalAlignment="Stretch" Background="Red" DockPanel.Dock="Left">
            <Thumb.Template>
              <ControlTemplate>
                <Rectangle Fill="{TemplateBinding Background}"/>
              </ControlTemplate>
            </Thumb.Template>
          </Thumb>
          <ContentPresenter Content="{TemplateBinding Content}"/>
        </DockPanel>
      </ControlTemplate>
    </Setter>
  </Style-->

  <Style Selector="mecb|CommandBar">
    <Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}" />
    <Setter Property="BaseWidth" Value="15"/>
    <Setter Property="Padding" Value="3"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
          <Border.BorderThickness>
            <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=TemplatedParent}" ConverterParameter="1;0">
              <Binding.Converter>
                <mecore:BorderPresenceToThicknessesConverter/>
              </Binding.Converter>
            </Binding>
          </Border.BorderThickness>
          <Panel Name="RootPanel">
            <DockPanel Margin="{TemplateBinding Padding}">
              <!--ContentPresenter x:Name="PART_FarEndContentPresenter" Content="{TemplateBinding FarEndContent}" DockPanel.Dock="Right"/-->
              <ItemsPresenter x:Name="PART_CommandBarEndItemsPresenter" Items="{TemplateBinding EndItems}" ItemTemplate="{TemplateBinding EndItemTemplate}" ItemsPanel="{TemplateBinding EndItemsPanel}" Margin="3,0,0,0" DockPanel.Dock="Right"/>
              <Panel Width="15" DockPanel.Dock="Right">
                <ToggleButton x:Name="PART_FlyoutToggleButton" BorderThickness="0" HorizontalAlignment="Stretch" IsVisible="{TemplateBinding HasFlyoutItems}" IsChecked="{Binding $parent[mectrl:OverflowFlyoutItemsControl].IsFlyoutOpen, Mode=TwoWay}">
                  <StackPanel Orientation="Horizontal" Spacing="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <StackPanel.RenderTransform>
                      <TranslateTransform X="-1"/>
                    </StackPanel.RenderTransform>
                    <Path Data="M0,0 L0,3 1.5,4.5 0,6 0,9 4.5,4.5 z" Fill="{Binding $parent[ToggleButton].Foreground}" StrokeThickness="0"/>
                    <Path Data="M0,0 L0,3 1.5,4.5 0,6 0,9 4.5,4.5 z" Fill="{Binding $parent[ToggleButton].Foreground}" StrokeThickness="0"/>
                    <!--Path Data="M 0 0 L 3 3 L 0 6 L 2 6 L 5 3 L 2 0 Z" Fill="{Binding $parent[ToggleButton].Foreground}" StrokeThickness="0"/-->
                    <!--Path Data="M 0 0 L 3 3 L 0 6" Stroke="{Binding $parent[ToggleButton].Foreground}" StrokeThickness="2"/-->
                  </StackPanel>
                </ToggleButton>
              </Panel>
              <ItemsControl x:Name="PART_VisibleItemsPresenter" Items="{TemplateBinding VisibleItems}">
                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <mectrl:AlignableStackPanel Spacing="3" Orientation="Horizontal" ClipToBounds="True" HorizontalChildrenAlignment="{Binding $parent[mectrl:OverflowFlyoutItemsControl].HorizontalItemsAlignment}" />
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
              </ItemsControl>
            </DockPanel>
            <Popup x:Name="PART_Flyout" PlacementMode="Bottom" PlacementTarget="{Binding ElementName=PART_FlyoutToggleButton}" IsOpen="{Binding $parent[mectrl:OverflowFlyoutItemsControl].IsFlyoutOpen, Mode=TwoWay}" MinHeight="{TemplateBinding MinHeight}" StaysOpen="False">
              <!--IsOpen="{Binding Path=IsChecked, ElementName=PART_FlyoutToggleButton, Mode=TwoWay}"-->
              <Border Background="{DynamicResource ThemeBackgroundBrush}" BorderBrush="{DynamicResource ThemeBorderMidBrush}" BorderThickness="{DynamicResource ThemeBorderThickness}">
                <ItemsControl x:Name="PART_FlyoutItemsPresenter" Items="{TemplateBinding FlyoutItems}" ItemsPanel="{TemplateBinding FlyoutItemsPanel}"/>
              </Border>
            </Popup>
          </Panel>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mecb|CommandBar /template/ ToggleButton#PART_FlyoutToggleButton:not(:pointerover):not(:pressed)">
    <Setter Property="Background" Value="Transparent"/>
  </Style>
  <Style Selector="mecb|CommandBar > :is(Button)">
    <Setter Property="Padding" Value="4"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
          <StackPanel Orientation="Horizontal" Spacing="4">
            <ContentPresenter x:Name="PART_IconPresenter" Content="{Binding (mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}" TextBlock.Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" TextBlock.Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </StackPanel>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mecb|CommandBar > :is(Button) /template/ Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mecb|CommandBar > :is(Button):not(:pointerover):not(:pressed) /template/ Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="Transparent"/>
  </Style>
  <Style Selector="mecb|CommandBar > :is(Button):pointerover /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlMidBrush}"/>
  </Style>
  <Style Selector="mecb|CommandBar > :is(Button):pressed /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>
  <Style Selector="mecb|CommandBar > ToggleButton:checked /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>

  <Style Selector="ItemsPresenter#PART_CommandBarEndItemsPresenter > :is(Panel) > :is(Button)">
    <Setter Property="Padding" Value="4"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
          <StackPanel Orientation="Horizontal" Spacing="4">
            <ContentPresenter x:Name="PART_IconPresenter" Content="{Binding (mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}" TextBlock.Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" TextBlock.Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </StackPanel>
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="ItemsPresenter#PART_CommandBarEndItemsPresenter > :is(Panel) > :is(Button) /template/ Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="ItemsPresenter#PART_CommandBarEndItemsPresenter > :is(Panel) > :is(Button):not(:pointerover):not(:pressed) /template/ Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="Transparent"/>
  </Style>
  <Style Selector="ItemsPresenter#PART_CommandBarEndItemsPresenter > :is(Panel) > :is(Button):pointerover /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlMidBrush}"/>
  </Style>
  <Style Selector="ItemsPresenter#PART_CommandBarEndItemsPresenter > :is(Panel) > :is(Button):pressed /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>
  <Style Selector="ItemsPresenter#PART_CommandBarEndItemsPresenter > :is(Panel) > ToggleButton:checked /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>

  <Style Selector="mectrl|FlyoutButton">
    <Setter Property="Background" Value="{DynamicResource ThemeControlMidBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderLowBrush}"/>
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}"/>
    <Setter Property="Foreground" Value="{DynamicResource ThemeForegroundBrush}"/>
    <Setter Property="Padding" Value="4"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Panel x:Name="PART_ButtonArea">
          <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Path Data="M 0 0 L 4 4 L 8 0 Z" Margin="4,0" Fill="{TemplateBinding Foreground}" DockPanel.Dock="Right" VerticalAlignment="Center"/>
              <DockPanel x:Name="ContentIconPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                <ContentPresenter Name="IconPresenter" Content="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}" DockPanel.Dock="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <Rectangle Name="IconGapRect" DockPanel.Dock="Left">
                  <Rectangle.IsVisible>
                    <MultiBinding ConverterParameter="All">
                      <MultiBinding.Converter>
                        <meconv:BoolsToBoolConverter/>
                      </MultiBinding.Converter>
                      <MultiBinding.Bindings>
                        <Binding Path="Content" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
                        <Binding Path="(mecore:AttachedIcon.Icon)" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
                      </MultiBinding.Bindings>
                    </MultiBinding>
                  </Rectangle.IsVisible>
                </Rectangle>
                <ContentPresenter Name="PART_ContentPresenter" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              </DockPanel>
            </DockPanel>
          </Border>
          <Popup x:Name="PART_Flyout" IsOpen="{Binding IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" StaysOpen="False" MinWidth="1" MinHeight="1" PlacementMode="Bottom" PlacementTarget="{Binding #BackgroundBorder}">
            <ContentPresenter Name="PART_FlyoutContentPresenter" Background="{DynamicResource ThemeBackgroundBrush}" BorderBrush="{DynamicResource ThemeBorderMidBrush}" BorderThickness="{DynamicResource ThemeBorderThickness}" ContentTemplate="{TemplateBinding FlyoutContentTemplate}" Content="{TemplateBinding FlyoutContent}" TextBlock.Foreground="{DynamicResource ThemeForegroundBrush}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"/>
          </Popup>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|FlyoutButton /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:not(:pointerover):not(:pressed):not(:checked) /template/ Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:checked /template/ Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:pointerover Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:pressed Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>
  <Style Selector="mectrl|FlyoutButton:disabled Border#BackgroundBorder">
    <Setter Property="Opacity" Value="{DynamicResource ThemeDisabledOpacity}"/>
  </Style>

  <Style Selector="mectrl|SplitButton">
    <Setter Property="Background" Value="{DynamicResource ThemeControlMidBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderLowBrush}"/>
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}"/>
    <Setter Property="Foreground" Value="{DynamicResource ThemeForegroundBrush}"/>
    <Setter Property="Padding" Value="4"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <ControlTemplate>
        <DockPanel>
          <mectrl:FlyoutButton Padding="4,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" FlyoutContent="{TemplateBinding FlyoutContent}" FlyoutContentTemplate="{TemplateBinding FlyoutContentTemplate}" IsChecked="{TemplateBinding IsFlyoutOpen}" IsEnabled="{TemplateBinding IsFlyoutSegmentEnabled}" IsVisible="{TemplateBinding IsFlyoutSegmentVisible}" FocusOnOpenElement="{TemplateBinding FocusOnOpenElement}" AutoCloseFlyout="{TemplateBinding AutoCloseFlyout}" Template="{DynamicResource EmbeddedFlyoutButtonTemplate}" Margin="-1,0,0,0" DockPanel.Dock="Right"/>
          <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel x:Name="ContentIconPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
              <ContentPresenter Name="IconPresenter" Content="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}" DockPanel.Dock="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <Rectangle Name="IconGapRect" DockPanel.Dock="Left">
                <Rectangle.IsVisible>
                  <MultiBinding ConverterParameter="All">
                    <MultiBinding.Converter>
                      <meconv:BoolsToBoolConverter/>
                    </MultiBinding.Converter>
                    <MultiBinding.Bindings>
                      <Binding Path="Content" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
                      <Binding Path="(mecore:AttachedIcon.Icon)" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
                    </MultiBinding.Bindings>
                  </MultiBinding>
                </Rectangle.IsVisible>
              </Rectangle>
              <ContentPresenter Name="PART_ContentPresenter" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </DockPanel>
          </Border>
        </DockPanel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|SplitButton:pointerover Border#BackgroundBorder">
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
  </Style>
  <Style Selector="mectrl|SplitButton:pressed Border#BackgroundBorder">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>
  <Style Selector="mectrl|SplitButton:disabled Border#BackgroundBorder">
    <Setter Property="Opacity" Value="{DynamicResource ThemeDisabledOpacity}"/>
  </Style>

  <Style Selector="mectrl|SplitToggleButton">
    <Setter Property="Background" Value="{DynamicResource ThemeControlMidBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderLowBrush}"/>
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}"/>
    <Setter Property="Foreground" Value="{DynamicResource ThemeForegroundBrush}"/>
    <Setter Property="Padding" Value="4"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <ControlTemplate>
        <DockPanel>
          <mectrl:FlyoutButton Padding="4,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" FlyoutContent="{TemplateBinding FlyoutContent}" FlyoutContentTemplate="{TemplateBinding FlyoutContentTemplate}" IsChecked="{TemplateBinding IsFlyoutOpen}" IsEnabled="{TemplateBinding IsFlyoutSegmentEnabled}" IsVisible="{TemplateBinding IsFlyoutSegmentVisible}" FocusOnOpenElement="{TemplateBinding FocusOnOpenElement}" AutoCloseFlyout="{TemplateBinding AutoCloseFlyout}" Template="{DynamicResource EmbeddedFlyoutButtonTemplate}" Margin="-1,0,0,0" DockPanel.Dock="Right"/>
          <Border x:Name="PART_ButtonArea" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel x:Name="ContentIconPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
              <ContentPresenter Name="IconPresenter" Content="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}" DockPanel.Dock="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <Rectangle Name="IconGapRect" DockPanel.Dock="Left">
                <Rectangle.IsVisible>
                  <MultiBinding ConverterParameter="All">
                    <MultiBinding.Converter>
                      <meconv:BoolsToBoolConverter/>
                    </MultiBinding.Converter>
                    <MultiBinding.Bindings>
                      <Binding Path="Content" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
                      <Binding Path="(mecore:AttachedIcon.Icon)" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{x:Static ObjectConverters.IsNotNull}"/>
                    </MultiBinding.Bindings>
                  </MultiBinding>
                </Rectangle.IsVisible>
              </Rectangle>
              <ContentPresenter Name="PART_ContentPresenter" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </DockPanel>
          </Border>
        </DockPanel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mectrl|SplitToggleButton:checked /template/ Border#PART_ButtonArea">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
  </Style>
  <Style Selector="mectrl|SplitToggleButton:pointerover Border#PART_ButtonArea">
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
  </Style>
  <Style Selector="mectrl|SplitToggleButton:pressed Border#PART_ButtonArea">
    <Setter Property="Background" Value="{DynamicResource ThemeControlHighBrush}"/>
  </Style>
  <Style Selector="mectrl|SplitToggleButton:disabled Border#PART_ButtonArea">
    <Setter Property="Opacity" Value="{DynamicResource ThemeDisabledOpacity}"/>
  </Style>
  <Style Selector="mecd|ContentDialogFrame">
    <Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}"/>
    <Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}"/>
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Background="Black" Opacity="0.75"/>
          <Border Width="475" MinHeight="175" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter Content="{TemplateBinding Content}"/>
          </Border>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mecd|BasicMessageDialog">
    <Setter Property="Template">
      <ControlTemplate>
        <DockPanel>
          <TextBlock Text="{TemplateBinding Title}" Margin="25,25,25,0" TextWrapping="Wrap" FontSize="20" DockPanel.Dock="Top"/>
          <Button x:Name="PART_OkButton" Content="OK" DockPanel.Dock="Bottom" Margin="25,0,25,25"/>
          <TextBlock Text="{TemplateBinding Message}" Margin="25" TextWrapping="Wrap"/>
        </DockPanel>
      </ControlTemplate>
    </Setter>
  </Style>
  <Style Selector="mecd|MessageActionDialog">
    <Setter Property="Template">
      <ControlTemplate>
        <DockPanel>
          <TextBlock Text="{TemplateBinding Title}" Margin="25,25,25,0" TextWrapping="Wrap" FontSize="20" DockPanel.Dock="Top"/>
          <!--Button x:Name="PART_OkButton" Content="OK" DockPanel.Dock="Bottom" Margin="25,0,25,25"/-->
          <ItemsControl Items="{Binding Actions}" DockPanel.Dock="Bottom">
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <UniformGrid Rows="1" Margin="25,0,0,25"/>
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.DataTemplates>
              <DataTemplate DataType="{x:Type mecd:IContentDialogAction}">
                <Button Command="{Binding SelectAction, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mecd:MessageActionDialog}}}" CommandParameter="{Binding}" Content="{Binding Title}" ToolTip.Tip="{Binding Description}" Margin="0,0,25,0"/>
              </DataTemplate>
            </ItemsControl.DataTemplates>
          </ItemsControl>
          <TextBlock Text="{TemplateBinding Message}" Margin="25" TextWrapping="Wrap"/>
        </DockPanel>
      </ControlTemplate>
    </Setter>
  </Style>
</Styles>