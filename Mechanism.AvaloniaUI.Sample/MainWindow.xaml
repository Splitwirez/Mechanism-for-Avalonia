<mewin:DecoratableWindow xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Mechanism.AvaloniaUI.Sample;assembly=Mechanism.AvaloniaUI.Sample"
        xmlns:vm="clr-namespace:Mechanism.AvaloniaUI.Sample.ViewModels;assembly=Mechanism.AvaloniaUI.Sample"
        xmlns:mectrl="clr-namespace:Mechanism.AvaloniaUI.Controls;assembly=Mechanism.AvaloniaUI"
        xmlns:mecore="clr-namespace:Mechanism.AvaloniaUI.Core;assembly=Mechanism.AvaloniaUI"
        xmlns:metb="clr-namespace:Mechanism.AvaloniaUI.Controls.ToolBar;assembly=Mechanism.AvaloniaUI"
        xmlns:mets="clr-namespace:Mechanism.AvaloniaUI.Controls.ToolStrip;assembly=Mechanism.AvaloniaUI"
        xmlns:mecb="clr-namespace:Mechanism.AvaloniaUI.Controls.CommandBar;assembly=Mechanism.AvaloniaUI"
        xmlns:mewin="clr-namespace:Mechanism.AvaloniaUI.Controls.Windows;assembly=Mechanism.AvaloniaUI"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="480"
        x:Class="Mechanism.AvaloniaUI.Sample.MainWindow"
        Title="Mechanism for Avalonia: Sample App" Width="800" Height="480"
        Icon="/Assets/avalonia-logo.ico">
  <mewin:DecoratableWindow.DataContext>
    <vm:MainWindowViewModel/>
  </mewin:DecoratableWindow.DataContext>
  <DockPanel>
    <DockPanel DockPanel.Dock="Top">
      <Rectangle Width="{Binding LeftHeaderbarInset, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mewin:DecoratableWindow}}, Mode=OneWay}" DockPanel.Dock="Left"/>
      <Rectangle Width="{Binding RightHeaderbarInset, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mewin:DecoratableWindow}}, Mode=OneWay}" DockPanel.Dock="Right"/>
      <TabControl TabStripPlacement="Bottom">
        <TabItem Header="CommandBar">
          <StackPanel Orientation="Vertical" Width="{Binding $parent[TabControl].Width}" Spacing="10">
            <mecb:CommandBar x:Name="CommandBar" DockPanel.Dock="Top" mecore:BorderPresence.BorderPresence="False,False,False,True" mecore:CornerCurves.CornerCurves="False">
              <mecb:CommandBar.Layers>
                <mecb:CommandBarLayer x:Name="Layer1" Identifier="LayerOne"/>
                <mecb:CommandBarLayer x:Name="Layer2" Identifier="LayerTwo"/>
              </mecb:CommandBar.Layers>
              <Button Content="Always visible">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </Button>
              <Button mecb:CommandBar.VisibleOnLayers="LayerOne,LayerTwo" Content="Visible on all layers">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </Button>
              <Button mecb:CommandBar.VisibleOnLayers="LayerOne" Content="Visible on LayerOne only">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </Button>
              <Button mecb:CommandBar.VisibleOnLayers="LayerTwo" Content="Visible on LayerTwo only">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </Button>
              <ToggleButton mecb:CommandBar.VisibleOnLayers="LayerOne" Content="ToggleButton 1">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </ToggleButton>
              <RepeatButton mecb:CommandBar.VisibleOnLayers="LayerTwo" Content="RepeatButton 1">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </RepeatButton>
              <ToggleButton mecb:CommandBar.VisibleOnLayers="LayerTwo" Content="ToggleButton 2">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </ToggleButton>
              <RepeatButton mecb:CommandBar.VisibleOnLayers="LayerOne" Content="RepeatButton 2">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </RepeatButton>
              <ToggleButton mecb:CommandBar.VisibleOnLayers="LayerOne" Content="ToggleButton 3">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </ToggleButton>
              <RepeatButton mecb:CommandBar.VisibleOnLayers="LayerTwo" Content="RepeatButton 3">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </RepeatButton>
              <ToggleButton mecb:CommandBar.VisibleOnLayers="LayerTwo" Content="ToggleButton 4">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </ToggleButton>
              <RepeatButton mecb:CommandBar.VisibleOnLayers="LayerOne" Content="RepeatButton 4">
                <mecore:AttachedIcon.Icon>
                  <Path Data="M 0 8 L 16 0 L 16 16 Z" Width="16" Height="16" Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                </mecore:AttachedIcon.Icon>
              </RepeatButton>
              <mecb:CommandBar.EndItems>
                <Button>
                  <Panel Width="16" Height="16">
                    <Ellipse Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                    <TextBlock Text="?" FontWeight="Bold" HorizontalAlignment="Center" TextAlignment="Center" Foreground="{Binding $parent[Button].Foreground}"/>
                  </Panel>
                </Button>
              </mecb:CommandBar.EndItems>
            </mecb:CommandBar>
            <CheckBox IsChecked="{Binding IsVisible, ElementName=Layer1}">LayerOne.IsVisible</CheckBox>
            <CheckBox IsChecked="{Binding IsVisible, ElementName=Layer2}">LayerTwo.IsVisible</CheckBox>
            <StackPanel Margin="10,0,0,0">
              <RadioButton x:Name="CommandBarLeftRadioButton" GroupName="CommandBarHorizontalItemsAlignment" IsChecked="True">Align items to left</RadioButton>
              <RadioButton x:Name="CommandBarRightRadioButton" GroupName="CommandBarHorizontalItemsAlignment">Align items to right</RadioButton>
            </StackPanel>
          </StackPanel>
        </TabItem>
        <TabItem Header="ToolBarTray">
          <StackPanel Orientation="Vertical" Spacing="10">
          <metb:ToolBarTray x:Name="ToolBarTray" DockPanel.Dock="Top" mecore:BorderPresence.BorderPresence="False,False,False,True" mecore:CornerCurves.CornerCurves="True,True,False,False">
            <metb:ToolBar UseOverflow="False">
              <Menu>
                <MenuItem Header="File">
                  <MenuItem Header="Open" IsEnabled="False"/>
                  <MenuItem Header="Save" IsEnabled="False"/>
                  <MenuItem Header="Save as..." IsEnabled="False"/>
                  <Separator/>
                  <MenuItem Header="Exit" Command="{Binding $parent[Window].CloseCommand}"/>
                </MenuItem>
                <MenuItem Header="Edit">
                  <MenuItem Header="Cut" IsEnabled="False"/>
                  <MenuItem Header="Copy" IsEnabled="False"/>
                  <MenuItem Header="Paste" IsEnabled="False"/>
                </MenuItem>
                <MenuItem Header="View">
                  <MenuItem Header="Icons" IsEnabled="False"/>
                  <MenuItem Header="List" IsEnabled="False"/>
                  <MenuItem Header="Details" IsEnabled="False"/>
                </MenuItem>
                <MenuItem Header="Tools">
                  <MenuItem Header="Options" IsEnabled="False"/>
                </MenuItem>
                <MenuItem Header="Help">
                  <MenuItem Header="About" IsEnabled="False"/>
                </MenuItem>
              </Menu>
            </metb:ToolBar>
            <metb:ToolBar Width="202" Band="1">
              <Button Content="Back">
                <mecore:AttachedIcon.Icon>
                  <Panel Width="24" Height="24">
                    <Ellipse Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                    <Path Data="M 8 0 L 0 8 L 8 16 L 11 16 L 3 8 L 11 0 Z" Fill="{Binding $parent[Button].Foreground}" Stretch="None" Width="11" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </Panel>
                </mecore:AttachedIcon.Icon>
              </Button>
              <Button Content="Forward">
                <mecore:AttachedIcon.Icon>
                  <Panel Width="24" Height="24">
                    <Ellipse Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                    <Path Data="M 0 0 L 8 8 L 0 16 L 3 16 L 11 8 L 3 0 Z" Fill="{Binding $parent[Button].Foreground}" Stretch="None" Width="11" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </Panel>
                </mecore:AttachedIcon.Icon>
              </Button>
              <Button Content="Cancel">
                <mecore:AttachedIcon.Icon>
                  <Panel Width="24" Height="24">
                    <Ellipse Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                    <Path Data="M 0 0 L 16 16 M 16 0 L 0 16" Stroke="{Binding $parent[Button].Foreground}" StrokeThickness="3" Stretch="None" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </Panel>
                </mecore:AttachedIcon.Icon>
              </Button>
            </metb:ToolBar>
            <metb:ToolBar Band="1" Width="279">
              <Button Content="Button">
                <mecore:AttachedIcon.Icon>
                  <Panel Width="24" Height="24">
                    <Ellipse Fill="#FFC00000" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                    <Path Data="M 0 0 L 16 16 M 16 0 L 0 16" Stroke="{Binding $parent[Button].Foreground}" StrokeThickness="3" Stretch="None" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </Panel>
                </mecore:AttachedIcon.Icon>
              </Button>
              <ToggleButton Content="ToggleButton">
                <mecore:AttachedIcon.Icon>
                  <Panel Width="24" Height="24">
                    <Ellipse Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                    <!--Path Data="M 0 0 L 16 16 M 16 0 L 0 16" Stroke="{Binding $parent[Button].Foreground}" StrokeThickness="3" Stretch="None" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/-->
                    <Border BorderBrush="{Binding $parent[ToggleButton].Foreground}" BorderThickness="3" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </Panel>
                </mecore:AttachedIcon.Icon>
              </ToggleButton>
              <RepeatButton Content="RepeatButton">
                <mecore:AttachedIcon.Icon>
                  <Panel Width="24" Height="24">
                    <Ellipse Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                    <Path Data="M 0 8 L 16 8 M 8 0 L 8 16" Stroke="{Binding $parent[RepeatButton].Foreground}" StrokeThickness="3" Stretch="None" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </Panel>
                </mecore:AttachedIcon.Icon>
              </RepeatButton>
            </metb:ToolBar>
            <metb:ToolBar Band="1">
              <Button Content="Button1">
                <mecore:AttachedIcon.Icon>
                  <Panel Width="24" Height="24">
                    <Ellipse Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                    <Path Data="M 0 8 L 16 8" Stroke="{Binding $parent[Button].Foreground}" StrokeThickness="3" Stretch="None" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </Panel>
                </mecore:AttachedIcon.Icon>
              </Button>
              <Button Content="Button2">
                <mecore:AttachedIcon.Icon>
                  <Panel Width="24" Height="24">
                    <Ellipse Fill="{DynamicResource ThemeBackgroundBrush}" Stroke="{DynamicResource ThemeBorderMidBrush}" StrokeThickness="1"/>
                    <Path Data="M 8 0 L 8 16" Stroke="{Binding $parent[Button].Foreground}" StrokeThickness="3" Stretch="None" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </Panel>
                </mecore:AttachedIcon.Icon>
              </Button>
            </metb:ToolBar>
            <metb:ToolBar Band="2" UseOverflow="False">
              <metb:ToolBar.ItemsPanel>
                <ItemsPanelTemplate>
                  <DockPanel/>
                </ItemsPanelTemplate>
              </metb:ToolBar.ItemsPanel>
              <TextBlock Margin="5,0" Text="Address" VerticalAlignment="Center" DockPanel.Dock="Left"/>
              <Button Padding="4" Margin="-1,0,0,0" DockPanel.Dock="Right">Go</Button>
              <TextBox>http://avaloniaui.net/</TextBox>
            </metb:ToolBar>
          </metb:ToolBarTray>
          <CheckBox Content="IsLocked" IsChecked="{Binding IsLocked, ElementName=ToolBarTray}"/>
          </StackPanel>
        </TabItem>
        <TabItem Header="ToolStrip">
          <StackPanel Orientation="Vertical" Spacing="10">
            <mets:ToolStrip x:Name="ToolStrip">
              <mets:ToolStrip.Items>
                <mets:ButtonToolStripItem x:Name="TestToolStripItem" DisplayName="Test" Command="{Binding OnClickCommand}" CommandParameter="{Binding DisplayName, RelativeSource={RelativeSource Mode=Self}}">
                  <mets:ButtonToolStripItem.Icon>
                    <ControlTemplate>
                      <Rectangle Width="16" Height="16" Fill="Red"/>
                    </ControlTemplate>
                  </mets:ButtonToolStripItem.Icon>
                </mets:ButtonToolStripItem>
                <mets:ButtonToolStripItem x:Name="TestToolStripItem2" DisplayName="Test2" Command="{Binding OnClickCommand}" CommandParameter="{Binding DisplayName, RelativeSource={RelativeSource Mode=Self}}">
                  <mets:ButtonToolStripItem.Icon>
                    <ControlTemplate>
                      <Rectangle Width="16" Height="16" Fill="Green"/>
                    </ControlTemplate>
                  </mets:ButtonToolStripItem.Icon>
                </mets:ButtonToolStripItem>
                <mets:ButtonToolStripItem x:Name="TestToolStripItem3" DisplayName="Test3" Command="{Binding OnClickCommand}" CommandParameter="{Binding DisplayName, RelativeSource={RelativeSource Mode=Self}}">
                  <mets:ButtonToolStripItem.Icon>
                    <ControlTemplate>
                      <Rectangle Width="16" Height="16" Fill="Blue"/>
                    </ControlTemplate>
                  </mets:ButtonToolStripItem.Icon>
                </mets:ButtonToolStripItem>
                <mets:ButtonToolStripItem x:Name="TestToolStripItem4" DisplayName="Test4" Command="{Binding OnClickCommand}" CommandParameter="{Binding DisplayName, RelativeSource={RelativeSource Mode=Self}}">
                  <mets:ButtonToolStripItem.Icon>
                    <ControlTemplate>
                      <Rectangle Width="16" Height="16" Fill="Yellow"/>
                    </ControlTemplate>
                  </mets:ButtonToolStripItem.Icon>
                </mets:ButtonToolStripItem>
                    <mets:ButtonToolStripItem x:Name="TestToolStripItem5" DisplayName="Test5" Command="{Binding OnClickCommand}" CommandParameter="{Binding DisplayName, RelativeSource={RelativeSource Mode=Self}}">
                  <mets:ButtonToolStripItem.Icon>
                    <ControlTemplate>
                      <Rectangle Width="16" Height="16" Fill="Orange"/>
                    </ControlTemplate>
                  </mets:ButtonToolStripItem.Icon>
                </mets:ButtonToolStripItem>
                <mets:ButtonToolStripItem x:Name="TestToolStripItem6" DisplayName="Test6" Command="{Binding OnClickCommand}" CommandParameter="{Binding DisplayName, RelativeSource={RelativeSource Mode=Self}}">
                  <mets:ButtonToolStripItem.Icon>
                    <ControlTemplate>
                      <Rectangle Width="16" Height="16" Fill="Purple"/>
                    </ControlTemplate>
                  </mets:ButtonToolStripItem.Icon>
                </mets:ButtonToolStripItem>
              </mets:ToolStrip.Items>
              <mets:ToolStrip.DefaultItems>
                <mets:ToolStripItemReference TargetItem="{Binding ElementName=TestToolStripItem}"/>
                <mets:ToolStripItemReference TargetItem="{Binding ElementName=TestToolStripItem2}"/>
              </mets:ToolStrip.DefaultItems>
            </mets:ToolStrip>
            <CheckBox Content="IsCustomizing" IsChecked="{Binding IsCustomizing, ElementName=ToolStrip}"/>
            <CheckBox Content="ShowLabels" IsChecked="{Binding ShowLabels, ElementName=ToolStrip}"/>
          </StackPanel>
        </TabItem>
      </TabControl>
    </DockPanel>
    <TreeView Width="150" mecore:BorderPresence.BorderPresence="false,false,true,false" DockPanel.Dock="Left" IsVisible="False">
      <TreeViewItem Header="Sample text">
        <TreeViewItem Header="Sample text 2"/>
        <TreeViewItem Header="Sample text 3"/>
      </TreeViewItem>
    </TreeView>
    <TabControl>
      <TabItem Header="Themes">
        <WrapPanel HorizontalAlignment="Center" VerticalAlignment="Center">
          <Button x:Name="DefaultThemeButton" Content="Avalonia Default"/>
          <Button x:Name="AeroThemeButton" Content="Windows Aero"/>
          <Button x:Name="SlateThemeButton" Content="Slate"/>
          <Button x:Name="JadeThemeButton" Content="Jade"/>
          <Button x:Name="FruitThemeButton" Content="Fruit"/>
          <Button x:Name="LunaThemeButton" Content="Luna (Planned, NYI)" IsVisible="False"/>
          <Button x:Name="PlexThemeButton" Content="Plex (Planned, NYI)" IsVisible="False"/>
          <Button x:Name="MetroThemeButton" Content="Metro (Planned, NYI)" IsVisible="False"/>
          <Button x:Name="ShaleThemeButton" Content="Shale (Planned, NYI)" IsVisible="False"/>
          <Button x:Name="AquaThemeButton" Content="Aqua (Planned, NYI)" IsVisible="False"/>
        </WrapPanel>
      </TabItem>
      <TabItem Header="Dialogs">
        <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
          <Button x:Name="ShowContentDialogButton">Show ContentDialog</Button>
          <Button x:Name="ShowContentDialog2Button">Show ContentDialog, and then show another one after one second</Button>
          <Button x:Name="ShowContentDialogWithActionsButton">Show ContentDialog with actions</Button>
          <TextBlock x:Name="LastActionResultTextBlock"/>
          <Button x:Name="ShowFileListmakerDialogButton" IsEnabled="False" IsVisible="False">Show FileListmakerDialog (NYI)</Button>
        </WrapPanel>
        <!--Rectangle>
          <Rectangle.Fill>
            <RadialGradientBrush Center="50%,50%" GradientOrigin="50%,50%" Radius="0.5">
              <GradientStop Offset="0" Color="White"/>
              <GradientStop Offset="1" Color="Black"/>
            </RadialGradientBrush>
          </Rectangle.Fill>
        </Rectangle-->
      </TabItem>
      <TabItem Header="DecoratableWindow">
        <StackPanel Orientation="Vertical" Spacing="10">
          <!--WrapPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Button x:Name="ShowDecoratableWindowWithCustomDecorationsButton">Show DecoratableWindow features demo with custom decorations</Button>
            <Button x:Name="ShowDecoratableWindowWithSystemDecorationsButton">Show DecoratableWindow features demo with system decorations</Button>
          </WrapPanel-->
          <CheckBox x:Name="SystemDecorationsCheckBox" Content="Use system decorations"/>
          <DockPanel>
            <TextBlock Text="ExtendedTitlebarHeight" DockPanel.Dock="Left" Margin="0,0,5,0"/>
            <Slider Value="{Binding $parent[mewin:DecoratableWindow].ExtendedTitlebarHeight}"/>
          </DockPanel>
          <!--, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mewin:DecoratableWindow}}-->
          <CheckBox Content="UseBlur" IsChecked="{Binding $parent[mewin:DecoratableWindow].UseBlur}"/>
          <CheckBox Content="UseHeaderbar" IsChecked="{Binding $parent[mewin:DecoratableWindow].UseHeaderbar}"/>
          <CheckBox Content="ShowIcon" IsChecked="{Binding ShowIcon, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mewin:DecoratableWindow}}}"/>
          <CheckBox Content="ShowTitle" IsChecked="{Binding ShowTitle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type mewin:DecoratableWindow}}}"/>
        </StackPanel>
      </TabItem>
      <TabItem Header="Properties" IsEnabled="False" IsVisible="False">
        <StackPanel Orientation="Vertical">
          <StackPanel IsVisible="False">
            <TextBlock Text="DecoratableWindow"/>
            <CheckBox Content="HasSystemDecorations" IsChecked="{Binding $parent[mewin:DecoratableWindow].HasSystemDecorations}"/>
          </StackPanel>
        </StackPanel>
      </TabItem>
      <TabItem Header="Attached Properties">
        <ScrollViewer>
          <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="10">
            <StackPanel.Styles>
              <Style Selector="Button">
                <Setter Property="Content">
                  <!--Value="{Binding (mecore:CornerCurves.CornerCurves), RelativeSource={RelativeSource Mode=Self}}"/-->
                  <MultiBinding>
                    <MultiBinding.Converter>
                      <local:SampleConverter/>
                    </MultiBinding.Converter>
                    <Binding Path="(mecore:CornerCurves.CornerCurves)" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="(mecore:BorderPresence.BorderPresence)" RelativeSource="{RelativeSource Mode=Self}"/>
                  </MultiBinding>
                </Setter>
                <!--Setter Property="Template">
                  <ControlTemplate>
                    <Border BorderBrush="Red" CornerRadius="{Binding Path=(mecore:CornerCurves.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiiConverter}, ConverterParameter='5;0'}" BorderThickness="{Binding Path=(mecore:BorderPresence.BorderPresence), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BorderPresenceToThicknessesConverter}, ConverterParameter='1;0'}">
                      <DockPanel Margin="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="PART_AttachedIconPresenter" Content="{Binding Path=(mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}, FallbackValue={x:Null}}" DockPanel.Dock="Left"/>
                        <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}"/>
                      </DockPanel>
                    </Border>
                  </ControlTemplate>
                </Setter-->
              </Style>
            </StackPanel.Styles>
            <Button HorizontalAlignment="Center">
              <mecore:AttachedIcon.Icon>
                <Rectangle Fill="Green" Width="16" Height="16"/>
              </mecore:AttachedIcon.Icon>
            </Button>
            <UniformGrid Columns="2" HorizontalAlignment="Center">
              <Button mecore:CornerCurves.CornerCurves="True,False,False,True"/>
              <Button mecore:CornerCurves.CornerCurves="False,True,True,False" mecore:BorderPresence.BorderPresence="False,True,True,True"/>
            </UniformGrid>
            <UniformGrid Columns="1" HorizontalAlignment="Center">
              <Button mecore:CornerCurves.CornerCurves="True,False"/>
              <Button mecore:CornerCurves.CornerCurves="False,True" mecore:BorderPresence.BorderPresence="True,False,True,True"/>
            </UniformGrid>
            <UniformGrid Columns="2" HorizontalAlignment="Center">
              <Button mecore:CornerCurves.CornerCurves="True,False,False,False"/>
              <Button mecore:CornerCurves.CornerCurves="False,True,False,False" mecore:BorderPresence.BorderPresence="False,True,True,True"/>
              <Button mecore:CornerCurves.CornerCurves="False,False,False,True" mecore:BorderPresence.BorderPresence="True,False,True,True"/>
              <Button mecore:CornerCurves.CornerCurves="False,False,True,False" mecore:BorderPresence.BorderPresence="False,False,True,True"/>
            </UniformGrid>
            <UniformGrid Columns="2" HorizontalAlignment="Center">
              <Rectangle/>
              <Button mecore:CornerCurves.CornerCurves="True,True,False,False" mecore:BorderPresence.BorderPresence="True,True,True,False"/>
              <Button mecore:CornerCurves.CornerCurves="True,False,False,True" mecore:BorderPresence.BorderPresence="True,True,False,True"/>
              <Button mecore:CornerCurves.CornerCurves="False,False,True,False"/>
            </UniformGrid>
            <UniformGrid Columns="2" HorizontalAlignment="Center">
              <Button HorizontalAlignment="Center" mecore:CornerCurves.CornerCurves="True,False,True,False" mecore:BorderPresence.BorderPresence="True,False,True,False"/>
              <TextBlock Text="   &lt;-- probably a bad idea lol" VerticalAlignment="Center"/>
            </UniformGrid>
          </StackPanel>
        </ScrollViewer>
      </TabItem>
      <TabItem Header="Buttons">
        <ScrollViewer>
          <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Spacing="10" Margin="4">
            <Grid ColumnDefinitions="*,10,*" RowDefinitions="*,10,*,10,*,10,*,10,*,10,*,10,*,10,*" VerticalAlignment="Top">
              <Grid.Styles>
                <Style Selector=":is(Button):disabled">
                  <Setter Property="Grid.Column" Value="2"/>
                </Style>
                <Style Selector="RepeatButton">
                  <Setter Property="Grid.Row" Value="2"/>
                </Style>
                <Style Selector="ToggleButton">
                  <Setter Property="Grid.Row" Value="4"/>
                </Style>
                <Style Selector="mectrl|FlyoutButton">
                  <Setter Property="Grid.Row" Value="6"/>
                </Style>
                <Style Selector="mectrl|SplitButton[IsFlyoutSegmentEnabled=True]">
                  <Setter Property="Grid.Row" Value="8"/>
                </Style>
                <Style Selector="mectrl|SplitButton[IsFlyoutSegmentEnabled=False]">
                  <Setter Property="Grid.Row" Value="10"/>
                </Style>
                <Style Selector="mectrl|SplitToggleButton[IsFlyoutSegmentEnabled=True]">
                  <Setter Property="Grid.Row" Value="12"/>
                </Style>
                <Style Selector="mectrl|SplitToggleButton[IsFlyoutSegmentEnabled=False]">
                  <Setter Property="Grid.Row" Value="14"/>
                </Style>
              </Grid.Styles>
              <Button Content="Button"/>
              <Button Content="Disabled Button" IsEnabled="False"/>
              <RepeatButton Content="RepeatButton"/>
              <RepeatButton Content="Disabled RepeatButton" IsEnabled="False"/>
              <ToggleButton Content="ToggleButton"/>
              <ToggleButton Content="Disabled ToggleButton" IsEnabled="False"/>
              <mectrl:FlyoutButton x:Name="FlyoutButton" Content="FlyoutButton" FocusOnOpenElement="{Binding ElementName=OkButton}" AutoCloseFlyout="False">
                <mectrl:FlyoutButton.FlyoutContent>
                  <StackPanel Orientation="Vertical" Margin="10" Spacing="10">
                    <TextBlock Text="Flyout content" FontWeight="Bold"/>
                    <TextBlock Text="You could also put a ListBox here or something, if needed." TextWrapping="Wrap"/>
                    <ToggleButton x:Name="OkButton" IsChecked="{Binding !IsChecked, ElementName=FlyoutButton, Mode=TwoWay}">OK</ToggleButton>
                  </StackPanel>
                </mectrl:FlyoutButton.FlyoutContent>
              </mectrl:FlyoutButton>
              <mectrl:FlyoutButton Content="Disabled FlyoutButton" IsEnabled="False"/>
              
                
              <mectrl:SplitButton Content="SplitButton" FocusOnOpenElement="{Binding ElementName=FlyoutListBox1}">
                <mectrl:SplitButton.FlyoutContent>
                  <ListBox x:Name="FlyoutListBox1" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
                    <ListBoxItem>Flyout content here</ListBoxItem>
                    <ListBoxItem>Flyout content here</ListBoxItem>
                    <ListBoxItem>Flyout content here</ListBoxItem>
                  </ListBox>
                </mectrl:SplitButton.FlyoutContent>
              </mectrl:SplitButton>
              <mectrl:SplitButton Content="Disabled SplitButton" IsEnabled="False" IsFlyoutSegmentEnabled="True" FocusOnOpenElement="{Binding ElementName=FlyoutListBox2}">
                <mectrl:SplitButton.FlyoutContent>
                  <ListBox x:Name="FlyoutListBox2" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
                    <ListBoxItem>Flyout content here</ListBoxItem>
                    <ListBoxItem>Flyout content here</ListBoxItem>
                    <ListBoxItem>Flyout content here</ListBoxItem>
                  </ListBox>
                </mectrl:SplitButton.FlyoutContent>
              </mectrl:SplitButton>
              <mectrl:SplitButton Content="SplitButton" IsFlyoutSegmentEnabled="False"/>
              <mectrl:SplitButton Content="Disabled SplitButton" IsEnabled="False" IsFlyoutSegmentEnabled="False"/>
              
                
              <mectrl:SplitToggleButton Content="SplitToggleButton" FocusOnOpenElement="{Binding ElementName=FlyoutListBox3}">
                <mectrl:SplitToggleButton.FlyoutContent>
                  <ListBox x:Name="FlyoutListBox3" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
                    <ListBoxItem>Flyout content here</ListBoxItem>
                    <ListBoxItem>Flyout content here</ListBoxItem>
                    <ListBoxItem>Flyout content here</ListBoxItem>
                  </ListBox>
                </mectrl:SplitToggleButton.FlyoutContent>
              </mectrl:SplitToggleButton>
              <mectrl:SplitToggleButton Content="Disabled SplitToggleButton" IsEnabled="False" IsFlyoutSegmentEnabled="True" FocusOnOpenElement="{Binding ElementName=FlyoutListBox4}">
                <mectrl:SplitToggleButton.FlyoutContent>
                  <ListBox x:Name="FlyoutListBox4" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
                    <ListBoxItem>Flyout content here</ListBoxItem>
                    <ListBoxItem>Flyout content here</ListBoxItem>
                    <ListBoxItem>Flyout content here</ListBoxItem>
                  </ListBox>
                </mectrl:SplitToggleButton.FlyoutContent>
              </mectrl:SplitToggleButton>
              <mectrl:SplitToggleButton Content="SplitToggleButton" IsFlyoutSegmentEnabled="False"/>
              <mectrl:SplitToggleButton Content="Disabled SplitToggleButton" IsEnabled="False" IsFlyoutSegmentEnabled="False"/>
            </Grid>
            <StackPanel Orientation="Vertical" Spacing="10">
              <RadioButton GroupName="RadiosGroup" Content="RadioButton"/>
              <RadioButton GroupName="RadiosGroup" Content="RadioButton but IsChecked == True" IsChecked="True"/>
              <RadioButton GroupName="RadiosGroup" Content="RadioButton but IsChecked == null" IsThreeState="True" IsChecked="{x:Null}"/>
              <RadioButton GroupName="RadiosGroup" Content="RadioButton but it's a disabled RadioButton" IsEnabled="False"/>
            </StackPanel>
            <StackPanel Orientation="Vertical" Spacing="10">
              <CheckBox Content="CheckBox"/>
              <CheckBox Content="CheckBox but IsChecked == true" IsChecked="True"/>
              <CheckBox Content="Checked CheckBox IsChecked == null" IsThreeState="True" IsChecked="{x:Null}"/>
              <CheckBox Content="CheckBox but it's a disabled CheckBox" IsEnabled="False"/>
            </StackPanel>
          </StackPanel>
        </ScrollViewer>
      </TabItem>
      <TabItem Header="Boxes">
        <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Spacing="10" Margin="4">
          <TextBox Text="TextBox"/>
          <TextBox Text=" Disabled TextBox" IsEnabled="False"/>
          <ListBox>
            <ListBoxItem Content="ListBoxItem"/>
            <ListBoxItem Content="ListBoxItem"/>
            <ListBoxItem Content="ListBoxItem"/>
          </ListBox>
          <ListBox IsEnabled="False">
            <ListBoxItem Content="Disabled ListBoxItem"/>
            <ListBoxItem Content="Disabled ListBoxItem"/>
            <ListBoxItem Content="Disabled ListBoxItem"/>
          </ListBox>
        </StackPanel>
      </TabItem>
      <TabItem Header="Spinners">
        <Grid ColumnDefinitions="86,10,86" RowDefinitions="21,10,21,10,21,10,21">
          <Grid.Styles>
            <Style Selector=":is(Control):disabled">
              <Setter Property="Grid.Column" Value="2"/>
            </Style>
            <Style Selector="ButtonSpinner">
              <Setter Property="Grid.Row" Value="0"/>
            </Style>
            <Style Selector="ButtonSpinner[ButtonSpinnerLocation=Left]">
              <Setter Property="Grid.Row" Value="2"/>
            </Style>
            <Style Selector="NumericUpDown">
              <Setter Property="Grid.Row" Value="4"/>
            </Style>
            <Style Selector="NumericUpDown[ButtonSpinnerLocation=Left]">
              <Setter Property="Grid.Row" Value="6"/>
            </Style>
          </Grid.Styles>
          <ButtonSpinner/>
          <ButtonSpinner IsEnabled="False"/>
          <ButtonSpinner ButtonSpinnerLocation="Left"/>
          <ButtonSpinner ButtonSpinnerLocation="Left" IsEnabled="False"/>
          <NumericUpDown/>
          <NumericUpDown IsEnabled="False"/>
          <NumericUpDown ButtonSpinnerLocation="Left"/>
          <NumericUpDown ButtonSpinnerLocation="Left" IsEnabled="False"/>
        </Grid>
      </TabItem>
      <TabItem Header="ScrollViewer">
        <ScrollViewer HorizontalScrollBarVisibility="Auto">
          <TextBlock TextWrapping="Wrap" Width="512">


            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed in lectus metus. Cras suscipit scelerisque eros. Ut fringilla tellus ultricies feugiat viverra. Aliquam id feugiat ligula. Cras et iaculis tellus. Praesent vitae ultricies massa, quis pellentesque nunc. Nullam enim nulla, sollicitudin sed neque eget, ullamcorper egestas velit. Suspendisse malesuada porta diam convallis aliquam. Phasellus nisl nisi, molestie sit amet sodales egestas, varius ut ligula. Integer sit amet neque ipsum. Fusce lobortis, sem a consequat posuere, est sapien consectetur ligula, elementum dictum metus massa sed dui. Nunc sed tortor non diam facilisis semper. Curabitur vel finibus mauris, id sagittis nibh. Nulla rhoncus luctus purus eget pellentesque.

            Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nam sed ante erat. Integer finibus molestie justo non faucibus. Sed sed dui venenatis, laoreet sem in, lobortis est. Praesent molestie purus vel dolor finibus faucibus. Nullam lobortis velit vulputate urna malesuada, ac maximus urna tincidunt. In sed accumsan odio. Vestibulum porttitor sem id risus pellentesque, mollis ultrices tellus congue. Fusce scelerisque, enim vitae tempus rhoncus, nibh ipsum lobortis est, posuere dapibus lorem metus quis ipsum. Donec id ipsum odio. Fusce pretium, nisi id viverra tempor, massa diam congue ex, in tincidunt eros sem id tortor. Aenean a sem convallis, interdum ligula ut, maximus turpis. Curabitur efficitur tellus ex, et faucibus enim pulvinar et. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Phasellus accumsan efficitur dapibus.

            Phasellus ante mi, consequat eu dui in, ultrices condimentum dui. Integer efficitur sem nunc, eu vestibulum diam varius sed. In non commodo lectus. Nulla eget sodales arcu. In quis consectetur augue, nec semper augue. Praesent tortor justo, pharetra at nibh eget, rhoncus aliquam erat. Maecenas hendrerit posuere tortor quis dictum. Cras porta quis nibh at porta. Quisque fermentum vestibulum arcu, non euismod neque luctus ac. Proin malesuada nunc lobortis diam egestas vehicula.

            Nam rhoncus lacus et ligula malesuada, sed commodo orci euismod. Quisque ornare risus non massa commodo euismod. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec non massa nisi. Nulla augue sapien, ornare a bibendum ut, imperdiet a erat. Fusce venenatis sem aliquet odio sollicitudin dictum vel elementum massa. Morbi a nulla maximus, placerat dui in, congue ante. Nullam bibendum dui ac dolor consequat varius. Curabitur efficitur, ligula a mollis pulvinar, tellus mauris ullamcorper lorem, ut malesuada libero nunc eget arcu. Curabitur iaculis, sem id tempus laoreet, eros lectus luctus risus, vitae commodo ex ligula ut enim. Quisque eget augue et sem rutrum blandit. Nulla lacinia sollicitudin dolor, sed rutrum purus luctus faucibus. Suspendisse porttitor aliquam massa, sagittis dignissim risus scelerisque quis. Vestibulum a iaculis lacus, a facilisis ante.

            Vestibulum ac diam at nulla posuere fermentum non quis massa. Maecenas tincidunt sit amet ipsum vel porta. Mauris vestibulum porttitor iaculis. Nam tristique velit ac felis lacinia hendrerit. Morbi condimentum erat at sapien luctus, non consequat nisl dapibus. Ut facilisis sollicitudin mollis. Donec viverra lacus posuere ante luctus, nec pretium sem tempus. Quisque nec vestibulum ex. Sed ut odio ipsum. Ut rutrum magna ut ipsum sodales auctor.

            Phasellus aliquam dolor eros, id varius mauris faucibus eu. Phasellus mauris arcu, consequat eget sem at, semper porta neque. Nulla maximus orci eget ligula iaculis condimentum. Ut quis est interdum neque pulvinar ultricies. Maecenas pharetra quam sed arcu imperdiet, sed sagittis nunc accumsan. Donec ullamcorper justo in tincidunt luctus. Cras urna magna, congue ac sapien ac, laoreet mattis tellus. Phasellus tempor auctor justo quis hendrerit. Mauris vel arcu sit amet neque pharetra suscipit. Sed porta vitae lorem quis tincidunt.

            Ut sodales eleifend orci, sed dictum nisl bibendum venenatis. Duis ullamcorper diam ac sapien ultrices, vitae vestibulum mi tincidunt. Aenean posuere interdum augue, pellentesque rutrum velit congue vel. Proin pharetra posuere tincidunt. Duis vel est ut nunc pharetra eleifend. Aliquam nisi ligula, tincidunt in rutrum eu, aliquam ullamcorper diam. Phasellus sit amet massa metus. Proin erat purus, sollicitudin eu est vel, varius rhoncus enim.

            Ut luctus ante vel viverra euismod. Proin a turpis eget felis sagittis pharetra. Nam at blandit quam. In sem arcu, faucibus eget scelerisque vel, sollicitudin nec magna. Ut convallis commodo est, sed ultrices enim facilisis at. Proin massa mauris, consequat eu fermentum ut, gravida quis nibh. Nam efficitur, lacus sit amet accumsan maximus, risus augue vehicula justo, sed egestas mi augue id nisi. Fusce sagittis eleifend dolor. Curabitur finibus nibh ex, eu vehicula nulla commodo quis. Vivamus porta luctus varius. Morbi vitae ultrices urna, sed consectetur justo. Sed condimentum ornare diam, ac dapibus est condimentum varius. Suspendisse potenti.

            Nam consectetur sollicitudin nisi eu condimentum. Vestibulum dictum neque a velit convallis maximus. Vivamus id maximus felis, in lobortis massa. Suspendisse sagittis imperdiet enim. Donec mollis ullamcorper euismod. Vivamus efficitur libero quis mattis mollis. Donec vel malesuada ipsum. Suspendisse potenti. Sed lobortis eleifend libero, dapibus fringilla massa bibendum non. Vivamus quam dolor, posuere nec lectus vitae, dapibus ultrices velit. Nam iaculis sem a eleifend euismod. Duis laoreet justo tellus, quis feugiat felis elementum eget. Vestibulum varius viverra ligula a ullamcorper. Suspendisse eu magna quis nulla egestas efficitur non at nibh. Nunc vestibulum magna vitae elit sodales facilisis.

            Duis maximus eget ante at blandit. Aenean vel nibh gravida, consequat turpis quis, pellentesque metus. Quisque varius, urna eget auctor iaculis, sem quam convallis sapien, sed laoreet ex turpis vel massa. Nullam imperdiet magna varius imperdiet placerat. Morbi convallis arcu lorem, eu sollicitudin felis ultricies id. Duis rutrum, sem in consectetur tincidunt, sapien tortor tristique dui, venenatis auctor mauris orci a nisl. Vestibulum sit amet erat semper, consectetur nulla pharetra, condimentum risus. Phasellus porta, lacus nec malesuada imperdiet, nibh sapien condimentum arcu, pretium laoreet orci arcu sit amet diam. Nullam vitae mauris purus.
          </TextBlock>
        </ScrollViewer>
      </TabItem>
    </TabControl>
  </DockPanel>
</mewin:DecoratableWindow>