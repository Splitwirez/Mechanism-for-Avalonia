<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mecore="clr-namespace:Mechanism.AvaloniaUI.Core;assembly=Mechanism.AvaloniaUI.Core"
        mc:Ignorable="d">
    <Style Selector="Button">
        <!--Style Selector="Button"-->
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="mecore:AttachedIcon.IconGap" Value="0" />
        <!--Setter Property="Background" Value="{DynamicResource SystemControlBackgroundChromeMediumBrush}"/-->
        <!--Setter Property="Background">
            <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%">
                <GradientStop Offset="0" Color="{DynamicResource SystemChromeMediumLowColor}"/>
                <GradientStop Offset="1" Color="{DynamicResource SystemChromeMediumColor}"/>
            </LinearGradientBrush>
        </Setter-->
        <Setter Property="Template">
            <ControlTemplate>
                <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" CornerRadius="{Binding Path=(mecore:CornerCurves.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiiConverter}, ConverterParameter='3;0'}" BorderThickness="{Binding Path=(mecore:BorderPresence.BorderPresence), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BorderPresenceToThicknessesConverter}, ConverterParameter='1;0'}">
                    <StackPanel x:Name="ContentPanel" Orientation="Vertical" Spacing="{Binding (mecore:AttachedIcon.IconGap), RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <TemplatedControl x:Name="PART_IconPresenter" Template="{Binding (mecore:AttachedIcon.Icon), Converter={StaticResource ObjectToTemplateConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}" TextBlock.Foreground="{TemplateBinding Foreground}" Background="Transparent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsVisible="{Binding (mecore:AttachedIcon.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ValueToIsNullBoolConverter}}"/>
                        <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" TextBlock.Foreground="{TemplateBinding Foreground}" Background="Transparent" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsVisible="{TemplateBinding Content, Converter={StaticResource ValueToIsNullBoolConverter}}"/>
                    </StackPanel>
                </Border>
            </ControlTemplate>
        </Setter>
    </Style>
    <Style Selector="Button /template/ Border#BackgroundBorder">
        <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    </Style>
    <Style Selector="Button:pointerover /template/ Border#BackgroundBorder">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}" />
    </Style>
    <Style Selector="Button:pressed /template/ Border#BackgroundBorder">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ButtonForegroundPressed}" />
    </Style>
    <Style Selector="Button:disabled /template/ Border#BackgroundBorder">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
    </Style>
</Styles>